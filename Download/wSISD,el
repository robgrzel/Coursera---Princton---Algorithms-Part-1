1
00:00:03,054 --> 00:00:09,019
Καλωσορίσατε. Σήμερα θα ρίξουμε μια ματιά σε μερικές ενδιαφέρουσες

2
00:00:09,019 --> 00:00:15,011
εφαρμογές πινάκων συμβόλων και την
δομή δυαδικού δένδρου αναζήτησης, για

3
00:00:15,011 --> 00:00:21,413
να λύσουμε προβλήματα επεξεργασίας γεωμετρικών
δεδομένων. Οπότε, ας αρχίσουμε. Η ιδέα

4
00:00:21,413 --> 00:00:27,378
είναι ότι πρόκειται να μιλήσουμε για
γεωμετρικά αντικείμενα, όχι απλά κλειδιά όπως

5
00:00:27,378 --> 00:00:33,338
κείμενο ή αριθμοί. Για παράδειγμα.
Ας πούμε ότι το γεωμετρικό αντικείμενο είναι σημεία

6
00:00:33,338 --> 00:00:38,346
σε επιφάνεια και ορίζουμε ένα ορθογώνιο
το οποίο είναι παράλληλο με

7
00:00:38,346 --> 00:00:43,404
τον οριζόντιο/κάθετο άξονα. Και μπορεί να
ρωτήσετε, ποια σημεία βρίσκονται μέσα στο

8
00:00:43,404 --> 00:00:48,200
ορθογώνιο ή πόσα σημεία είναι μέσα
στο ορθογώνιο; Ή ίσως αυτό που

9
00:00:48,200 --> 00:00:54,011
επεξεργάζεστε είναι ορθογώνια. Έχετε μία συλλογή
από ορθογώνια, και θέλετε να ξέρετε ποια

10
00:00:54,011 --> 00:01:00,291
από αυτά τα ορθογώνια τέμνονται; Ή πόσες
τομές ορθογωνίων υπάρχουν. Αυτά

11
00:01:00,291 --> 00:01:05,837
είναι ενδιαφέροντα προβλήματα που έχουν
πολλές εφαρμογές, από

12
00:01:05,837 --> 00:01:11,806
ψηφιακά σχέδια, έως παιχνίδια και ταινίες
και επίσης αφηρημένες έννοιες όπως βάσεις

13
00:01:11,806 --> 00:01:17,849
δεδομένων και άλλες περιπτώσεις όπου μπορεί
να έχουμε πολλαπλά κλειδιά ή πολλαπλές διαστάσεις.

14
00:01:18,065 --> 00:01:24,856
Και η πιο ενδιαφέρουσα επέκταση 
των ιδεών αυτών είναι ότι κοιτάζουμε για πίνακες

15
00:01:24,856 --> 00:01:30,175
συμβόλων και όλες τις σχετικές
εφαρμογές. Και συνεπώς τα δυαδικά

16
00:01:30,175 --> 00:01:34,300
δένδρα αναζήτησης και αυτοί οι
αλγόριθμοι που ψάχνουμε

17
00:01:34,300 --> 00:01:39,774
παρέχουν πολύ αποδοτικές λύσεις σε 
ένα αριθμό προβλημάτων της περιοχής αυτής.

18
00:01:39,774 --> 00:01:45,943
Και πραγματικά έχουμε ανάπτυξη
και νέες τεχνολογίες σε όλα τα είδη

19
00:01:45,943 --> 00:01:51,135
των εφαρμογών. Έτσι για την αρχή θα
κοιτάξουμε στο απλό πρόβλημα που ονομάζεται

20
00:01:51,135 --> 00:01:56,761
μονοδιάστατη αναζήτηση. Και
πραγματικά δημιουργείται η βάση στην οποία

21
00:01:56,761 --> 00:02:02,146
όπου θα δράσουμε. Είναι μια μικρή
επέκταση του API ταξινομημένου πίνακα συμβόλων

22
00:02:02,146 --> 00:02:07,837
το οποίο δώσαμε νωρίτερα και θα 
έχουμε λειτουργίες αναζήτηση με εύρος και

23
00:02:07,837 --> 00:02:12,797
εύρος-τιμών. Έτσι στην μονοδιάστατη περίπτωση
σημαίνει ότι έχουμε ένα κλειδί και θα εισάγουμε

24
00:02:12,797 --> 00:02:19,116
τα ζευγάρια κλειδιών-τιμών στην αρχή και θέλουμε
να έχουμε την δυνατότητα να ψάχνουμε για ένα κλειδί, και

25
00:02:19,116 --> 00:02:24,770
την τιμή που συσχετίζεται με αυτό, και θέλουμε
να έχουμε την δυνατότητα της διαγραφής. Αλλά τότε θέλουμε

26
00:02:24,770 --> 00:02:30,703
τις λειτουργίες αναζήτησης-εύρους και εύρους τιμών.
Έτσι βρίσκουμε όλα τα κλειδιά που βρίσκονται μεταξύ δύο

27
00:02:30,703 --> 00:02:36,083
δοσμένων κλειδιών ή παρέχουμε πόσα κλειδιά
βρίσκονται μεταξύ των δύο κλειδιών. Έτσι για αυτό

28
00:02:36,083 --> 00:02:42,251
το παράδειγμα στα δεξιά εισάγουμε τον αριθμό
των κλειδιών και τα παρουσιάζουμε αυτα

29
00:02:42,251 --> 00:02:47,992
σε σειρά ταξινομημένα. Αλλά τότε, θα μπορούσες να πεις,
καλά, πόσα κλειδιά υπάρχουν εκεί

30
00:02:47,992 --> 00:02:53,780
μεταξύ του g και k; Σε αυτή την περίπτωση υπάρχουν
μόνο δύο. Και τότε ο πελάτης ίσως ζητήσει,

31
00:02:53,780 --> 00:02:59,598
ποια είναι αυτά τα κλειδιά, και θέλεις να μπορείς
να τα επιστρέψεις αυτά. Και αυτό είναι πολύ

32
00:02:59,598 --> 00:03:06,010
διαδεδομένη λειτουργία, ας πούμε στις βάσεις. Εσύ
θέλεις να επιστρέψεις πόσοι φορολογούμενοι έχουν

33
00:03:06,010 --> 00:03:11,335
μισθούς μεταξύ ενός εκατομμυρίων και δέκα
εκατομμυρίων και ποιοι είναι αυτοί και

34
00:03:11,335 --> 00:03:17,431
λοιπά. Έτσι η αναζήτηση εύρους είναι μια πολύ
σημαντική αλλά και βασική λειτουργία. Τώρα, στην

35
00:03:17,431 --> 00:03:23,459
γεωμετρική αναπαράσταση, σκεφτόμαστε
ότι τα κλειδιά ως σημεία στην γραμμή. Και έτσι

36
00:03:23,459 --> 00:03:29,627
οι τιμές των κλειδιών, έχουν οριστεί ως
σημεία στην γραμμή. Ίσως θέλουμε να μετατρέψουμε

37
00:03:29,627 --> 00:03:34,856
τα γράμματα σε αριθμούς, ή ίσως τα κλειδιά
να είναι αριθμοί. Και τότε, αυτό που θέλουμε

38
00:03:34,856 --> 00:03:41,119
να δούμε είναι η εύρεση του πλήθους των σημείων
για ένα συγκεκριμένο διάστημα στην μία διάσταση. Έτσι

39
00:03:41,575 --> 00:03:47,272
πως θα το υλοποιήσουμε αυτό; Ωραία,
αυτό είναι το βασικό πρόβλημα το οποίο είναι

40
00:03:47,272 --> 00:03:52,356
παρόμοιο με το πρόβλημα του πίνακα συμβόλων. Εμείς
ίσως εξετάσουμε την περίπτωση αποθήκευσης σε

41
00:03:52,356 --> 00:03:57,529
ένα αταξινόμητο πίνακα. Απλά τα βάζουμε σε ένα
πίνακα, και τότε, καλώς η εισαγωγή γίνεται

42
00:03:57,529 --> 00:04:03,254
γρήγορα.Απλά το προσθέτουμε στο τέλος της
γραμμής.Ίσως χρειαστεί να αλλάξουμε το μέγεθος

43
00:04:03,254 --> 00:04:08,371
για να μεγαλώσουμε τη γραμμή.Αλλά αυτό δεν είναι
επιθυμητό,επειδή για μεγάλα πλήθη

44
00:04:08,371 --> 00:04:13,899
κλειδιών,προκειμένου να μετρήσουμε τα κλειδιά τα οποία 
βρίσκονται σε ένα δεδομένο εύρος,πρέπει να

45
00:04:13,899 --> 00:04:19,711
διατρέξουμε όλα τα κλειδιά και να δοκιμάσουμε αν
βρίσκονται ή όχι στο εύρος και να επιστρέφουμε

46
00:04:19,711 --> 00:04:26,043
με τον ίδιο τρόπο.Γι' αυτό χρησιμοποιήστε γραμμικό χρόνο για μεγάλα πλήθη κλειδιών.Αν αφήσετε τα πράγματα ως έχει

47
00:04:26,267 --> 00:04:32,638
τα πράγματα ως έχουν,όπως σε μία δυαδική κατάσταση
αναζήτησης,τότε για να εισάγετε,προκειμένου να τα κρατήσετε

48
00:04:32,638 --> 00:04:38,591
σε τάξη σε μία σειρά,ίσως χρειαστεί να 
κουνήσετε τα μεγάλα κλειδιά σε μία θέση

49
00:04:38,596 --> 00:04:44,209
και πίσω ή στοιχειώδης εφαρμογή 
της δυαδικής αναζήτησης όπως όταν κάναμε συμβολικούς πίνακες.

50
00:04:44,406 --> 00:04:49,662
Συνεπώς,η χρονική στιγμή της εισαγωγής ίσως είναι
γραμμική,αλλά ύστερα μπορείτε να χρησιμοποιήσετε δυαδική

51
00:04:49,662 --> 00:04:55,329
αναλογία για να συνδεθείτε,για να ψάξετε για τα δύο καταληκτικό σημεία,
αυτό μόνο χρόνο θα πάρει

52
00:04:55,329 --> 00:05:00,631
αναλογικό για να συνδεθείτε.Και τότε,από
αυτό,μπορείτε να προσδιορίσετε πόσα κλειδιά

53
00:05:00,631 --> 00:05:06,243
υπάρχουν ή να τα επιστρέψετε  όλα μεταξύ του 
δείκτη,το χαμηλότερου στο εύρος και

54
00:05:06,243 --> 00:05:12,027
του υψηλότερου.Οπότε,αυτές
οι στοιχειώδεις εφαρμογές δεν είναι

55
00:05:12,027 --> 00:05:18,179
αποδεκτές από μεγάλα πλήθη κλειδιών επειδή
περιέχουν τη γραμμική λειτουργία του χρόνου.Άρα,

56
00:05:18,179 --> 00:05:24,035
αυτό που πραγματικά θέλουμε,είναι να έχουμε χρόνο
αναλογικό για να συνδεθούμε.Για να εισάγουμε και,

57
00:05:24,035 --> 00:05:29,186
για να μετρήσουμε.Για την αναζήτηση εύρους,
φυσικά,πρέπει να ακουμπήσουμε κάθε κλειδί

58
00:05:29,186 --> 00:05:35,413
που επιστρέφουμε,ώστε ο τρέχων χρόνος να είναι αναλογικός του πλήθους

59
00:05:35,413 --> 00:05:43,042
των κλειδιών που ταιριάζουν.Αλλά όπως και να χει,αυτοί είναι λογικοί στόχοι.Και είναι εύκολο να τους 

60
00:05:43,042 --> 00:05:51,545
επιτύχουμε.Οπότε [βήχας] για παράδειγμα,τι 
συμβαίνει με τη μονοδιάστατη μέτρηση εύρους?

61
00:05:51,545 --> 00:05:58,014
Λοιπόν,αυτό που θα κάνουμε,είναι απλά να κρατήσουμε 
τα κλειδιά σε ένα δένδρο δυαδικής αναζήτησης και να 

62
00:05:58,014 --> 00:06:03,484
κοιτάξουμε την εφαρμογή της συνάρτησης ταξινόμησης
για δυαδική αναζήτηση για δυαδικά δένδρα αναζήτησης όπου για

63
00:06:03,484 --> 00:06:09,342
κάθε κλειδί,μπορούμε να υπολογίσουμε πόσα κλειδιά 
υπάρχουν που είναι αυστηρώς λιγότερα από αυτό

64
00:06:09,342 --> 00:06:15,508
το κλειδί.Οπότε,σ'αυτή την περίπτωση,η ταξινόμηση του e είναι δύο και του h είναι τρία και ούτω καθεξής.Άρα,σε ένα

65
00:06:15,508 --> 00:06:21,413
δένδρο δυαδικής αναζήτησης,αυτοί οι ταξινομημένοι αριθμοί πηγαίνουν με μία αύξουσα σειρά όπως κάνουμε σε ένα

66
00:06:21,413 --> 00:06:27,662
διατεταγμένο διάσχισης και αυτό είναι εύκολο να
υπολογιστεί.Είναι απαραίτητο να κρατάτε αυτό το ταξινομημένο δένδρο

67
00:06:27,662 --> 00:06:33,813
σαν πεδίο,ή να κρατάτε ένα πεδίο το οποίο έχει το μέγεθος του δένδρου και είναι εύκολο να συμπληρώσετε

68
00:06:33,813 --> 00:06:40,760
την ταξινόμηση από αυτό.Άρα, πόσα κλειδιά θα υπάρχουν 
μεταξύ,ας πούμε των e και s? Λοιπόν,ένα,δύο,

69
00:06:40,760 --> 00:06:51,297
τρία,τέσσερα,πέντε.Ουσιαστικά,είναι απλά η
διαφορά ανάμεσα στις ταξινομήσεις συν ένα αν

70
00:06:51,623 --> 00:07:00,361
η υψηλή [βήχας] καταχώριση στο ερώτημα του εύρους 
είναι στον πίνακα και όχι συν μία παραπάνω.Άρα,

71
00:07:00,361 --> 00:07:08,274
υπάρχει το ίδιο πλήθος κλειδιών ανάμεσα στο e
και το s όπως υπάρχουν ανάμεσα στο e και το t πέντε.

72
00:07:08,274 --> 00:07:15,192
Ανάμεσα στο f και το t,υπάρχουν μόνο τέσσερα.Άρα,
στην πραγματικότητα μία 1διάστατη μέτρηση εύρους είναι ένας 

73
00:07:15,192 --> 00:07:22,412
πολύ εύκολος υπολογισμός να πραγματοποιήσουμε σε 
βάθος χρόνου,με ένα δυαδικό δένδρο αναζήτησης.

74
00:07:22,412 --> 00:07:28,297
Ο [βήχας] αριθμός των κόμβων που εξετάζονται όταν
κάνουμε αναζήτηση, είναι το μήκος του

75
00:07:28,297 --> 00:07:33,789
δρόμου αναζήτησης στην κάθοδο συν το μήκος του δρόμου
αναζήτησης στην άνοδο για να [βήχας] βρούμε τις ταξινομήσεις τους

76
00:07:33,976 --> 00:07:39,595
και αυτό θα είναι χρόνος ανάλογος του logN [βήχας].Το ίδιο και της αναζήτησης εύρους.

77
00:07:39,595 --> 00:07:46,018
Λοιπόν,κάνουμε απλά μια αναδρομική αναζήτηση και για να 
βρούμε όλα τα κλειδιά ανάμεσα στο υψηλό και το χαμηλό 

78
00:07:46,214 --> 00:07:51,472
κοιτάξτε το αριστερό υποδένδρο,μήπως κάποιο από αυτά
βρίσκεται στο εύρος.Κοιτάξτε τον

79
00:07:51,472 --> 00:07:57,106
τρέχων κόμβο και κοιτάξτε στα δεξιά 
του υποδένδρου, μήπως κάποιο από αυτά βρίσκεται στο

80
00:07:57,106 --> 00:08:02,555
εύρος.Και είναι εύκολο να αποφανθούμε για το αν κάποιο
απ'αυτά θα μπορούσε να βρίσκεται στο εύρος,απλά

81
00:08:02,555 --> 00:08:08,476
ελέγχοντας αν το εύρος τους υπερκαλύπτει 
τη ρίζα ή όχι.Άρα,αν ψάχνουμε για 

82
00:08:08,476 --> 00:08:14,469
όλα τα κλειδιά μεταξύ των f και t,τότε πρέπει
να κοιτάξουμε και στα δύο υποδένδρα των ριζών.

83
00:08:14,469 --> 00:08:19,643
Αλλά δεν κοιτάμε το αριστερό 
υποδένδρο του e επειδή όλα αυτά είναι μικρότερα

84
00:08:19,643 --> 00:08:26,018
απ'το e και συνεπώς μικρότερα του f.Άρα,
δε χρειάζεται να πρέπει να κοιτάξουμε εκεί.Αλλά

85
00:08:26,018 --> 00:08:31,419
διαφορετικά,είναι μια απλή τροποποίηση του
αναδρομικού δένδρου αναζήτησης για να βρούμε όλα τα κλειδιά

86
00:08:31,635 --> 00:08:37,702
και είναι εύκολο να δούμε τον τρέχων χρόνο ο οποίος 
θα είναι αναλογικός του 

87
00:08:37,702 --> 00:08:47,518
πλήθους των κλειδιών που επιστρέφονται συν logN.Άρα,
αυτή είναι μια αναζήτηση εύρους με διαστάσεις χρησιμοποιώντας

88
00:08:47,518 --> 00:08:51,040
δένδρα δυαδικής αναζήτησης.