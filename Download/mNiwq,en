1
00:00:01,072 --> 00:00:06,509
To finish up, we're going to look at the
rectangle intersection problem that's got

2
00:00:06,509 --> 00:00:12,287
important practical applications and, uses
the techniques that we've been studying so

3
00:00:12,287 --> 00:00:17,913
far. And it's a simple generalization of
our line intersection problem. So now, we

4
00:00:17,913 --> 00:00:23,254
have a bunch of rectangles. They're all
oriented horizontal or vertical. And what

5
00:00:23,254 --> 00:00:28,680
we need to do is find all the
intersections in that set of rectangles.

6
00:00:28,952 --> 00:00:36,195
And again N could be huge in applications,
as we'll talk about in a second. And the

7
00:00:36,416 --> 00:00:42,674
[cough] Naive Brute-Force Algorithm
involves checking each pair of rectangles

8
00:00:42,674 --> 00:00:48,301
for intersection. And what we want is a
more efficient algorithm than that as

9
00:00:48,301 --> 00:00:52,997
usual. And again, to keep the code simple
we're going to assume that all the

10
00:00:52,997 --> 00:00:57,970
coordinates are distinct. We don't have
any, any equal lines that we have to worry

11
00:00:57,970 --> 00:01:03,395
about whether we consider rectangles that
touch to be intersecting, and so forth. So

12
00:01:03,591 --> 00:01:09,193
that's, that's the problem, rectangle
intersection search. This is historically,

13
00:01:09,450 --> 00:01:16,122
an extremely, important problem. In the
1970s, when we switched to very large

14
00:01:16,122 --> 00:01:22,178
scale integration for computers, we were
switching from a situation where we were

15
00:01:22,178 --> 00:01:27,931
wiring physical devices together, to a
situation where we were essentially

16
00:01:27,931 --> 00:01:34,379
drawing the computer. And there were
machines that would take drawings and, and

17
00:01:34,379 --> 00:01:41,067
return, [cough] and from those drawings,
like this, make, physical things that

18
00:01:41,067 --> 00:01:46,090
implemented computers with different
layers and different, physical materials

19
00:01:46,090 --> 00:01:52,002
interacting, in different ways. Some
things are wires, and some things are

20
00:01:52,002 --> 00:01:57,015
switches that, are used to, implement
memory bits and computer logic. But the

21
00:01:57,015 --> 00:02:02,316
key point about it is that designing a
computer became a geometric problem. And

22
00:02:02,316 --> 00:02:08,335
so, people, to design new computers,
would, make huge drawings that just showed

23
00:02:08,335 --> 00:02:14,058
the lines that corresponded to the
materials that had to be created to make

24
00:02:14,058 --> 00:02:19,488
the computer. Now, it was very expensive.
You didn't want to have any bugs when

25
00:02:19,488 --> 00:02:25,303
you're making a chip. And, there were
various rules about what you can do on

26
00:02:25,303 --> 00:02:30,614
these drawings. And basically, these rules
had to do with doing this ortho,

27
00:02:30,614 --> 00:02:36,077
orthogonal rectangle intersection search.
You, you can't have [cough] lines that

28
00:02:36,077 --> 00:02:40,993
come too close to other lines, certain
types of lines can't intersect. Need

29
00:02:40,993 --> 00:02:47,304
spacing between certain types of wires
and, you wanted to, before you tried to

30
00:02:47,304 --> 00:02:52,811
make the physical circuit to do this
checking, which involved this orthogonal

31
00:02:53,023 --> 00:02:59,216
rectangle intersection sort. And it was
actually the case that the progress of

32
00:02:59,415 --> 00:03:05,100
faster and faster processors with more and
more components was slowed because people

33
00:03:05,100 --> 00:03:11,519
were using the naive quadratic algorithm
to do this design rule checking. And its

34
00:03:11,519 --> 00:03:18,581
example of, of Moore's law. So, as we
built a faster computer say, in 1970X, we

35
00:03:18,581 --> 00:03:25,382
needed to check in rectangles. But now,
maybe a year and a half later, you have a

36
00:03:25,382 --> 00:03:31,336
computer that's two times faster but you
also want to build a bigger computer so

37
00:03:31,336 --> 00:03:36,225
you have twice as many rectangles to
check. So you have two end rectangles to

38
00:03:36,225 --> 00:03:42,485
check now, and your computer's twice as
fast. So, we get to use the faster and

39
00:03:42,485 --> 00:03:49,000
bigger computer to build faster and bigger
circuits but that doesn't help if you're

40
00:03:49,000 --> 00:03:54,077
using a quadratic algorithm. If you're
using a quadratic algorithm and it takes

41
00:03:54,077 --> 00:04:01,108
you n days to check your design rules, and
people were running these things on the

42
00:04:01,108 --> 00:04:06,647
order of days, then for the next computer,
it would take 2n days, it would take twice

43
00:04:06,647 --> 00:04:12,732
as long. And so people that were using
quadratic algorithms were definitely held

44
00:04:12,732 --> 00:04:19,860
back and, it was, Ed, Ed McCreight at
Xerox Park who, discovered interval search

45
00:04:19,860 --> 00:04:26,367
trees and the logarithmic algorithm that
allowed us to sustain Moore's law and keep

46
00:04:26,367 --> 00:04:33,386
building bigger and bigger computers. By
changing this quadratic algorithm to a

47
00:04:33,386 --> 00:04:38,432
linear logarithmic algorithm, and let's
see how it works. Really, it's a

48
00:04:38,432 --> 00:04:44,401
modification of the sweep line algorithm
that we looked at for intersecting lines.

49
00:04:44,611 --> 00:04:50,132
But now we're going to use that for
intersecting rectangles rather than using

50
00:04:50,524 --> 00:04:55,872
range search as our basic operation, we're
going to use interval search. So now,

51
00:04:55,872 --> 00:05:00,451
every time the line sweep hits a
rectangle, that corresponds to an

52
00:05:00,451 --> 00:05:06,429
interval. If it's the left part of a
rectangle, then we put that interval into

53
00:05:06,429 --> 00:05:13,358
our interval search tree. So in this case
we put on zero and then we put on one and

54
00:05:13,358 --> 00:05:20,966
then we put on two. And, and that will
give us now three rectangles on our sweep

55
00:05:20,966 --> 00:05:27,351
line. And so now, the question is when we
hit a, a new rectangle, we want to do an

56
00:05:27,351 --> 00:05:33,304
interval search to, if we're at the left
to check which ones intersect and the

57
00:05:33,304 --> 00:05:38,870
interval search tree algorithm is going to
tell us which intersections there are

58
00:05:38,870 --> 00:05:45,456
right away. When we reach the right then
we remove intervals and so forth. But with

59
00:05:45,456 --> 00:05:51,553
the basic interval search tree algorithm
and the sweep line process that we've

60
00:05:51,553 --> 00:05:57,590
talked about, you can get the orthogonal,
orthogonal rectangle intersection search

61
00:05:57,590 --> 00:06:02,296
problem solved in time proportional to
analog N log N + R log N, where R is the

62
00:06:02,296 --> 00:06:07,448
number of intersections. And typically, in
design rule checking, you wouldn't expect

63
00:06:07,657 --> 00:06:14,371
too many intersections. So again, just as
with, line intersection search, using a

64
00:06:14,371 --> 00:06:20,267
priority queue or a sort is only N log N
for processing the X coordinates. And

65
00:06:20,267 --> 00:06:25,875
because the interval search trees take log
N for every operation, the insert and

66
00:06:25,875 --> 00:06:32,395
delete intervals is N log N totaled and
the searches is N log N + R log N. So, the

67
00:06:32,395 --> 00:06:36,088
bottom line is that the sweep line
algorithm takes this rectangle

68
00:06:36,088 --> 00:06:42,017
intersection problem and reduces it to 1D
interval search and we have an efficient

69
00:06:42,017 --> 00:06:47,014
algorithm for that problem and that
enables us to solve the problem in linear

70
00:06:47,014 --> 00:06:52,030
rhythmic time instead of quadratic time.
And that definitely enabled new progress

71
00:06:52,231 --> 00:06:57,593
in technology and it's a fine example of
the importance of algorithmic technology.

72
00:06:57,593 --> 00:07:01,850
So here's our summary of applications of
binary search trees for geometric

73
00:07:01,850 --> 00:07:08,142
problems. We started with one dimensional
range search and just used regular binary

74
00:07:08,142 --> 00:07:13,852
search tree to compute ranks to get the
answer. But that as the basis, we're able

75
00:07:13,852 --> 00:07:19,792
to solve the two dimensional line segment
intersection search using the sweep line

76
00:07:19,792 --> 00:07:25,344
algorithm. Then we looked at range search
and other operations using KD trees.

77
00:07:25,540 --> 00:07:31,332
Again, modification of binary search
trees. And then the interval search tree

78
00:07:31,332 --> 00:07:37,427
to solve the one dimensional N over search
problem and then how that corresponds to

79
00:07:37,638 --> 00:07:43,397
the basic algorithm that you get to if you
use the sweep line algorithm to solve

80
00:07:43,397 --> 00:07:49,060
rectangle intersection. Many of these
problems are the basis for geometric

81
00:07:49,060 --> 00:07:55,089
processing of huge amounts of data that we
see all over the web. And our basic search

82
00:07:55,089 --> 00:08:01,029
tree mentality and APIs, and binary search
tree data structure give us efficient

83
00:08:01,029 --> 00:08:11,044
solutions to these important practical
problems.