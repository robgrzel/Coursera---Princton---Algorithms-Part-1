1
00:00:03,230 --> 00:00:04,080
おかえりなさい。

2
00:00:04,080 --> 00:00:07,380
今回はマージソートを見ていきましょう。

3
00:00:07,380 --> 00:00:09,880
二つの古典ソートアルゴリズムの一つで

4
00:00:09,880 --> 00:00:12,340
世界中の計算機器において重要な役目を果たしています。

5
00:00:13,824 --> 00:00:16,398
完全なる科学的な立証が

6
00:00:16,398 --> 00:00:19,896
このアルゴリズム特性において成されており

7
00:00:19,896 --> 00:00:23,130
システム実装やアプリケーションの実用ソートとして開発され、

8
00:00:23,130 --> 00:00:26,560
50 年以上も前から、たくさん使われています。

9
00:00:26,560 --> 00:00:28,550
事実、クイックソートは、それは次回にやりますが、

10
00:00:28,550 --> 00:00:30,470
表彰されました。

11
00:00:30,470 --> 00:00:33,990
科学エンジニアリング部門の、20 世紀のトップ 10 アルゴリズムの一つとして。

12
00:00:35,190 --> 00:00:38,540
この講義では、マージソートを見て行きます。

13
00:00:38,540 --> 00:00:43,629
Java を含めた多くのあらゆるプログラミングシステムでの基本ソートです。

14
00:00:44,730 --> 00:00:46,750
次回はクイックソートを見て行きます。

15
00:00:46,750 --> 00:00:49,520
それもあらゆるアプリケーションにおいて、Java で使われています。

16
00:00:52,720 --> 00:00:56,320
ではマージソートアルゴリズムの基本から。それはどういったものでしょうか？

17
00:00:57,870 --> 00:00:59,530
考え方はとても簡単です。

18
00:00:59,530 --> 00:01:02,820
やる事は、配列を半分に分割します。

19
00:01:02,820 --> 00:01:06,200
再帰的にそれぞれの半分単位でソートします。

20
00:01:06,200 --> 00:01:07,840
そして結果をマージします。

21
00:01:07,840 --> 00:01:09,720
以上がマージソートの概要です。

22
00:01:11,480 --> 00:01:14,240
マージソートは実際にコンピュータに実装された

23
00:01:14,240 --> 00:01:17,270
最初の主要アルゴリズムの一つです。

24
00:01:18,300 --> 00:01:22,450
ジョン・フォン・ノイマンは

25
00:01:22,450 --> 00:01:25,300
EDVAC というコンピュータの開発を実現しました。

26
00:01:25,300 --> 00:01:28,080
最初のコンピュータのはしりです。それで

27
00:01:28,080 --> 00:01:31,230
ソート法の確立が必要になり、彼はマージソートを思いつきました。

28
00:01:31,230 --> 00:01:33,951
彼はマージソートの発案者として広く認められています。

29
00:01:36,230 --> 00:01:40,220
マージソートは、マージする事自体のアイデアが元になっています。

30
00:01:41,328 --> 00:01:44,982
どのようにマージするかを理解するために、

31
00:01:44,982 --> 00:01:48,730
Abstract in-place マージについて考えてみましょう。

32
00:01:49,810 --> 00:01:54,470
配列 A があり、一つめの半分、二つ目の半分ともソートされています。

33
00:01:54,470 --> 00:02:01,420
やらなければならない事は、この状態から

34
00:02:01,420 --> 00:02:04,880
半分に分けられた二つをマージしてソートされた配列に置き換える事です。

35
00:02:04,880 --> 00:02:05,855
デモを見ましょう。

36
00:02:05,855 --> 00:02:11,290
[咳払い]

37
00:02:11,290 --> 00:02:13,200
これからやる方法は

38
00:02:13,200 --> 00:02:17,880
データを保持しておく補助配列を用います。

39
00:02:17,880 --> 00:02:21,100
これはマージを実装する最も簡単な方法の一つです。

40
00:02:21,100 --> 00:02:24,890
最初に、全てを補助配列にコピーしておきます。

41
00:02:27,080 --> 00:02:31,580
それが出来たら、やりたいことは

42
00:02:31,580 --> 00:02:36,160
元の配列にソートし終えたものをコピーして戻すことです。

43
00:02:36,160 --> 00:02:39,930
そうするために、３つのインデックスを管理します。

44
00:02:39,930 --> 00:02:46,320
i は左半分の現在位置、j は右半分の現在位置、

45
00:02:46,320 --> 00:02:52,100
k はソート結果の現在位置です。[COUGH] そして、最初にすることは

46
00:02:52,100 --> 00:03:00,000
i と j が指している二つの要素を比較して、小さいほうを取り出します。

47
00:03:00,000 --> 00:03:06,210
小さいほうを取り出して、出力側の次の要素に移動します。

48
00:03:06,210 --> 00:03:09,170
取り出した方は、ポインタを一つ進めます。

49
00:03:10,330 --> 00:03:13,450
さらに比較して小さい方を調べます。

50
00:03:13,450 --> 00:03:17,030
同じく j のグループにある方が小さいですね。k に移動します。

51
00:03:17,030 --> 00:03:19,810
ポインタの j を進めて、k も進めます。

52
00:03:20,850 --> 00:03:25,050
次は二つとも E です。同じ時は常に一番目のグループから取ります。

53
00:03:25,050 --> 00:03:29,570
ですので、左側の配列のほうを k の位置に持って行きます。

54
00:03:29,570 --> 00:03:31,200
そして i と k を進めます。

55
00:03:32,440 --> 00:03:36,300
再び、E で同じです。

56
00:03:36,300 --> 00:03:40,120
一番目のグループのほうを取りますので、i と k を進めます。

57
00:03:41,470 --> 00:03:42,034
そして次は

58
00:03:42,034 --> 00:03:44,020
j の指す E は G より小さいです。

59
00:03:44,020 --> 00:03:46,860
次に移し替えなければならない物です。

60
00:03:46,860 --> 00:03:49,510
移動して、i と k を進めます。

61
00:03:50,710 --> 00:03:52,770
次は 、i の指している G が小さいですので、

62
00:03:52,770 --> 00:03:56,480
移動して i と k を進めます。

63
00:03:56,480 --> 00:04:04,040
M を移動して、i と k を進めます。左側の最後に残った要素が

64
00:04:04,040 --> 00:04:07,310
次に移動する物です。

65
00:04:07,310 --> 00:04:12,790
一番目の子配列は使い切りましたので、後は

66
00:04:12,790 --> 00:04:16,120
右側にある残りの要素を取り出して、元位置に移動します。

67
00:04:17,680 --> 00:04:21,680
実際にはコピーしてきたわけですから、この移動をしないことで最適化できます。

68
00:04:22,860 --> 00:04:28,860
以上が Abstract in-place マージで、二つのソートされた子配列を

69
00:04:28,860 --> 00:04:32,660
補助配列を使っていったん移し替えて、

70
00:04:32,660 --> 00:04:36,450
ソートされた順番で戻す方法になります。

71
00:04:36,450 --> 00:04:40,650
これがマージ処理のコードです。デモと全く同じ流れです。

72
00:04:42,060 --> 00:04:47,290
最初に、Comparable 型の配列をソートするために、

73
00:04:47,290 --> 00:04:52,610
この実装では補助配列も渡します。

74
00:04:52,610 --> 00:04:57,840
そして３つの引数の

75
00:04:57,840 --> 00:04:59,410
lo と mid と hi

76
00:04:59,410 --> 00:05:02,840
lo は一番目の配列側にあります。

77
00:05:02,840 --> 00:05:06,350
mid は中間点で、

78
00:05:06,350 --> 00:05:09,320
一番目と二番目を分割します。そして条件は、

79
00:05:09,320 --> 00:05:12,830
lo から mid がソートされている事、そして mid + 1 から hi がソートされている事です。

80
00:05:13,966 --> 00:05:17,278
[COUGH] それからマージの実装です。最初に

81
00:05:17,278 --> 00:05:20,600
全てを補助配列にコピーしておきます。

82
00:05:21,650 --> 00:05:23,220
そしてそれから、この部分で

83
00:05:23,220 --> 00:05:27,470
for ループによりマージを果たしています。

84
00:05:27,470 --> 00:05:30,970
はじめに、ポインタ i を左半分の左端、

85
00:05:30,970 --> 00:05:33,430
ポインタ j を、右半分の左端に置きます。

86
00:05:33,430 --> 00:05:34,480
mid + 1 ですね。

87
00:05:34,480 --> 00:05:37,690
ポインタ k を lo を初期値として始めます。

88
00:05:37,690 --> 00:05:43,000
k のそれぞれでやることのほとんどは、

89
00:05:43,000 --> 00:05:48,400
配列 aux の j が、配列 aux の i より小さいかどうかの

90
00:05:48,400 --> 00:05:48,900
比較です。

91
00:05:50,780 --> 00:05:55,730
そうであれば、j の要素を移動して、j を進めます。

92
00:05:56,780 --> 00:06:00,490
大きければ、i の要素を移動して、i を進めます。

93
00:06:00,490 --> 00:06:02,690
両方のケースで、k を進めます。

94
00:06:02,690 --> 00:06:06,910
これでマージを実装しています。

95
00:06:06,910 --> 00:06:12,250
ポインタ i を使い切ったら、単に j の要素を全て移し替えるだけです。

96
00:06:12,250 --> 00:06:13,650
ポインタ j を使い切ったら、

97
00:06:13,650 --> 00:06:18,680
i の要素を全て移し替えます。毎回

98
00:06:18,680 --> 00:06:23,790
k の位置に要素を移動させるわけです。以上のコードが

99
00:06:23,790 --> 00:06:28,812
Abstract in-place マージの実装です。このコードにおいて

100
00:06:28,812 --> 00:06:33,896
アサーションを行なうアイデアも紹介しておきます。

101
00:06:33,896 --> 00:06:38,900
よりデバッグしやすくなり、実装が正しいことに自信が持てます。

102
00:06:40,530 --> 00:06:46,410
このケースでは、このアサーションは

103
00:06:46,410 --> 00:06:51,710
配列 a は lo から mid 間でソートされていること、そして mid + 1 から

104
00:06:51,710 --> 00:06:55,050
high 間がソートされていることを事前に確認するためのものです。

105
00:06:55,050 --> 00:06:58,580
それから、最後に全体がソートされているかもチェックしたいですね。

106
00:06:59,976 --> 00:07:05,664
一般的に Java プログラマは、これらのアサーションをやっておくことを

107
00:07:05,664 --> 00:07:08,766
よい考えだと知っています。

108
00:07:08,766 --> 00:07:11,112
バグを検出するのに役立つだけでなく、

109
00:07:11,112 --> 00:07:13,880
コードがどういう挙動を期待しているか文書化します。

110
00:07:13,880 --> 00:07:17,190
このマージソートのコードは良い例です。

111
00:07:17,190 --> 00:07:20,052
コードの先頭に書いておけば、

112
00:07:20,052 --> 00:07:24,180
アサーションから期待する内容を把握できますし、それ自身がコードです。

113
00:07:24,180 --> 00:07:25,730
コードの終わりに書いておけば、

114
00:07:25,730 --> 00:07:28,820
アサーションからやろうとしていることを思い返せます。

115
00:07:28,820 --> 00:07:31,010
それらの状態を満たしているかをテストして、

116
00:07:31,010 --> 00:07:35,150
コードを読む人に何をしようとしているのかも伝えるのです。

117
00:07:36,930 --> 00:07:42,990
Java では単に assert 文です。条件の真偽値を取ります。

118
00:07:42,990 --> 00:07:47,830
このケースでは、isSorted メゾッドを使っています。

119
00:07:47,830 --> 00:07:52,880
移し替えた配列がソートされていれば true そうでなければ false を返します。

120
00:07:52,880 --> 00:07:56,280
assert 文は例外を投げます。

121
00:07:56,280 --> 00:07:57,850
条件を満たさない限り。

122
00:07:58,950 --> 00:08:00,852
Java においてアサーション周りは

123
00:08:00,852 --> 00:08:04,250
実行時に有効にするか切り替えられます。

124
00:08:04,250 --> 00:08:07,850
とても大事な事です。なぜなら

125
00:08:07,850 --> 00:08:11,550
開発時にのみチェックするようにコードに含める事ができます。

126
00:08:11,550 --> 00:08:16,870
しかし運用コードでは余計なコストを全くかけません。

127
00:08:16,870 --> 00:08:20,310
デフォルトでは、アサーションは無効です。

128
00:08:20,310 --> 00:08:21,480
何か不具合が起こったら

129
00:08:22,590 --> 00:08:26,830
状況を解析する人はアサーションを有効にできます。

130
00:08:28,270 --> 00:08:30,960
それらが問題箇所を見つける手助けをしてくれるでしょう。

131
00:08:32,060 --> 00:08:36,980
一番良い使い方は、アサーションを

132
00:08:36,980 --> 00:08:39,870
マージの例でやったように使い、

133
00:08:39,870 --> 00:08:42,010
運用コードでは起こらない前提で考えることです。

134
00:08:42,010 --> 00:08:44,240
それらを使うべきでないのは、

135
00:08:44,240 --> 00:08:45,825
入力を個々のケースでチェックするような事です。

136
00:08:45,825 --> 00:08:50,990
いいでしょう。以上のマージ実装により、

137
00:08:50,990 --> 00:08:56,020
ソートの実装は、このようにそれなりに簡単で、ここにあるように再帰処理です。

138
00:08:57,840 --> 00:09:03,390
見た通り、マージ関数を使い、それからソート関数です。

139
00:09:03,390 --> 00:09:07,250
再帰ですね、初めにやっておくことをチェックします。

140
00:09:07,250 --> 00:09:10,960
それから中間点を求めます。

141
00:09:10,960 --> 00:09:14,990
二分探索でやった事と同じです。一番目の半分をソートします。

142
00:09:14,990 --> 00:09:17,810
二番目の半分をソートします。そしてそれらをマージします。

143
00:09:18,830 --> 00:09:24,080
実際の sort は単に一つの配列を引数を取り、

144
00:09:24,080 --> 00:09:29,370
補助配列をつくって、そしてそれらを使います。

145
00:09:30,390 --> 00:09:36,300
重要なのは、補助配列を

146
00:09:36,300 --> 00:09:38,840
再帰の繰り返し中に生成しないことです。なぜなら

147
00:09:38,840 --> 00:09:43,460
無用に配列を生成すると、とてもコストがかかるからです。

148
00:09:43,460 --> 00:09:48,720
そのようなバグがあると、マージソートの性能がでないケースに出くわすでしょう。

149
00:09:48,720 --> 00:09:53,170
そうでなければ、これはとても簡素な実装です。

150
00:09:53,170 --> 00:09:56,890
これらはアルゴリズムデザインの原型となるもので

151
00:09:56,890 --> 00:09:58,510
何度も何度も目にすることになるでしょう。

152
00:09:58,510 --> 00:10:00,450
分割統治法と呼ばれます。

153
00:10:00,450 --> 00:10:01,460
問題を解くには

154
00:10:01,460 --> 00:10:04,370
二つの半分に分けて、二つを解きます。

155
00:10:04,370 --> 00:10:07,420
それから解を一緒にして、求める答えを得ます。

156
00:10:10,675 --> 00:10:15,450
[COUGH]  これがマージソートのやっていることをトレースしたものです。

157
00:10:15,450 --> 00:10:22,590
再帰プログラムを学んだことがなければ、こういった詳細を学ぶことは価値があります。

158
00:10:22,590 --> 00:10:28,550
マージを呼ぶ毎に何が起こっているかをはっきりと示してくれています。

159
00:10:28,550 --> 00:10:31,740
取りかかる最初の大仕事は、半分にして

160
00:10:31,740 --> 00:10:34,660
さらにそれを半分にして、またさらにそれを半分にします。

161
00:10:34,660 --> 00:10:35,710
最初に

162
00:10:35,710 --> 00:10:38,110
やることは、比較して

163
00:10:38,110 --> 00:10:41,150
必要ならば二つの要素を入れ替えます。

164
00:10:41,150 --> 00:10:43,960
同じ事を次の二つの要素にも行ないます。

165
00:10:43,960 --> 00:10:48,040
二つをマージして、最初の４つが完了です。

166
00:10:48,040 --> 00:10:50,300
そして、配列内の次の４つに対して同じ事を行ないます。

167
00:10:50,300 --> 00:10:53,790
大きさ４の、ソートされた二つの子配列になります。

168
00:10:53,790 --> 00:10:56,330
これらをマージして、大きさ８のものを得ます。

169
00:10:56,330 --> 00:10:57,840
そして、同じことを右側でも行ないます。

170
00:10:57,840 --> 00:11:00,890
最終的に、大きさ８の二つの配列をマージして、

171
00:11:00,890 --> 00:11:03,250
完了となります。

172
00:11:03,250 --> 00:11:06,110
このトレースを学ぶのは、とてもためになります。

173
00:11:06,110 --> 00:11:09,850
この再帰アルゴリズムがやっていることをしっかりと理解できます。

174
00:11:11,350 --> 00:11:14,080
それではアニメーションで見てみましょう。マージソートが

175
00:11:14,080 --> 00:11:16,149
より効率的で、もっともっと多くの要素を扱えることがわかります。

176
00:11:17,800 --> 00:11:20,820
一番目の半分がソートされました。

177
00:11:20,820 --> 00:11:23,040
今、二番目の半分を処理中です。

178
00:11:24,160 --> 00:11:26,100
そして二番目の半分がソートし終えたら、

179
00:11:26,100 --> 00:11:29,430
いよいよです。それらをマージして、ソート結果を得ます。

180
00:11:30,530 --> 00:11:34,490
ちらほら別の [COUGH] 動きが

181
00:11:34,490 --> 00:11:37,319
アニメーションにありましたが、補助配列のためですね。

182
00:11:38,710 --> 00:11:41,010
逆順ソートされている場合で見てみましょう。

183
00:11:43,680 --> 00:11:49,590
一番目の半分が終わりました。二番目の半分を処理中です。

184
00:11:49,590 --> 00:11:54,100
二番目の半分が終わったら、さあこれで全体をマージします。

185
00:11:54,100 --> 00:11:58,180
逆順も正順と同じ速さです。

186
00:11:59,910 --> 00:12:04,210
マージソートは巨大な問題にも対応できます。

187
00:12:04,210 --> 00:12:09,520
とても効率的なアルゴリズムです。例をあげると、

188
00:12:09,520 --> 00:12:16,140
この表で示しているのは、挿入ソートを巨大なファイルに対して行なったとした場合、

189
00:12:16,140 --> 00:12:18,660
ファイルが十億要素あるとしたら、

190
00:12:18,660 --> 00:12:21,770
あなたの PC では、完了するまでに数百年かかるでしょう。

191
00:12:23,380 --> 00:12:26,300
スーパーコンピュータでさえ、挿入ソートを使うと

192
00:12:26,300 --> 00:12:30,380
今でも、一週間以上かかるでしょう。

193
00:12:30,380 --> 00:12:32,150
もしマージソートのような良いアルゴリズムがあれば、

194
00:12:32,150 --> 00:12:34,540
十億要素に対して行なった場合、

195
00:12:34,540 --> 00:12:39,150
あなたの PC で、３０分以下で完了できます。

196
00:12:39,150 --> 00:12:42,880
スーパーコンピュータはすぐ完了します。

197
00:12:42,880 --> 00:12:46,150
小さな問題では、あなたの PC でもすぐに完了します。

198
00:12:46,150 --> 00:12:52,890
お金や時間をたくさん費やすことができるのか、良いアルゴリズムを使うことができるのか、

199
00:12:52,890 --> 00:12:56,750
それが本コースのメインテーマの一つです。

200
00:12:56,750 --> 00:13:00,770
良いアルゴリズムは、よっぽど効果的です。

201
00:13:00,770 --> 00:13:03,990
お金や時間を無駄に費やしたり、悪いものに時間を費やすよりも。

202
00:13:06,750 --> 00:13:11,950
ではマージソート解析を見てみましょう。やや数学的ですが、

203
00:13:11,950 --> 00:13:21,040
分割統治法の効力を示す大変良い教材です。

204
00:13:21,040 --> 00:13:26,900
挿入ソートや選択ソートのように、二乗時間のかかる問題を取り上げ、

205
00:13:26,900 --> 00:13:33,200
マージソートにより log N 時間で終わらせることができます。

206
00:13:33,200 --> 00:13:37,000
これが命題です。マージソートは

207
00:13:37,000 --> 00:13:41,050
サイズ N の配列をソートする時、最大 N lg N の比較と 6 N lg N の配列アクセスを行なう。

208
00:13:42,310 --> 00:13:48,190
この命題を証明する方法は、

209
00:13:48,190 --> 00:13:53,900
コードを検証して、漸化式と呼ばれるものに書き出します。

210
00:13:53,900 --> 00:13:59,140
すなわち、コード内で起こっている事を数学的に書き写すということです。

211
00:13:59,140 --> 00:14:04,220
N 個の要素をソートする場合に、C N を

212
00:14:04,220 --> 00:14:07,610
N 個の要素をソートするために必要な比較回数とします。

213
00:14:08,620 --> 00:14:14,740
そうするためには、左半分と右半分をソートします。

214
00:14:14,740 --> 00:14:20,100
この表記は N/2 の天井値と N/2 の底値、すなわち、

215
00:14:20,100 --> 00:14:25,450
N/2 の切り上げ、N/2 の切り捨てです。それは二つの子配列の大きさです。

216
00:14:25,450 --> 00:14:27,410
そのサイズ分、同じように反復処理を行いますので、

217
00:14:27,410 --> 00:14:29,460
それが必要な比較回数です。

218
00:14:29,460 --> 00:14:33,060
N/2 での C は、左に N/2 の切り上げ、

219
00:14:33,060 --> 00:14:35,737
右に N/2 の切り捨てです。

220
00:14:35,737 --> 00:14:40,450
マージする際に、最大 N 回の比較が必要です。

221
00:14:41,690 --> 00:14:45,940
どちらも使い切らなければ、きっちり N 回の比較が必要です。

222
00:14:45,940 --> 00:14:49,300
そしてこの式は N が 1 以上である限り、成り立ちます。

223
00:14:49,300 --> 00:14:50,530
要素数が一つの場合は、

224
00:14:50,530 --> 00:14:55,580
比較を全く行ないません。これが、

225
00:14:55,580 --> 00:15:02,830
コードから導いた数式になります。完璧に

226
00:15:02,830 --> 00:15:07,200
必要な比較回数の上限を数学的に示しています。

227
00:15:07,200 --> 00:15:11,170
同じように配列アクセス数に対して行なうと、

228
00:15:11,170 --> 00:15:15,930
マージのための配列アクセス数は、最大 6N となります。

229
00:15:17,040 --> 00:15:20,800
これらは数学の公式の類で

230
00:15:20,800 --> 00:15:23,240
それらの式を解く方法がありますが、それには踏み込みません。

231
00:15:23,240 --> 00:15:25,610
離散数学のコースではありませんので。

232
00:15:27,940 --> 00:15:34,820
ですが、N が 2 の累乗数である場合の漸化式の解き方でお見せします。

233
00:15:34,820 --> 00:15:36,530
全ての N に適用されることが分かります。

234
00:15:36,530 --> 00:15:39,090
それは、帰納法でこの漸化式を証明できます。

235
00:15:40,280 --> 00:15:45,040
この漸化式は [COUGH]

236
00:15:45,040 --> 00:15:47,540
これまでに論じてきた事と似ていて、

237
00:15:47,540 --> 00:15:52,840
N が 2 の累乗数ならば、完全に同じです。ではこれを見ましょう。

238
00:15:52,840 --> 00:15:53,010
もし、

239
00:15:53,010 --> 00:16:00,520
D N が 2D N/2+N であり、D 1 が 0 であることが成り立つならば、D N は N log N と等しい。

240
00:16:00,520 --> 00:16:04,800
三つの証明を見て行きます。N は 2 の累乗数であると仮定して。

241
00:16:04,800 --> 00:16:07,140
N が 2 の累乗数なら、N/2 も

242
00:16:07,140 --> 00:16:10,350
2 の累乗数です。漸化式が成り立ちます。

243
00:16:11,510 --> 00:16:15,310
これが図で表したものです。

244
00:16:15,310 --> 00:16:18,140
D N を計算したいなら、D

245
00:16:18,140 --> 00:16:24,470
N/2 を二回計算することです。それで 2 と、

246
00:16:24,470 --> 00:16:30,285
マージ分の追加コスト N です。この部分を二回ですので 2 N/2 です。

247
00:16:30,285 --> 00:16:34,590
というわけで、2 N/2 があります。

248
00:16:34,590 --> 00:16:38,110
それぞれは N/4 に分けていたものです。

249
00:16:38,110 --> 00:16:43,130
それぞれの 4 N/4 は、N/4 のマージするコストがかかります。

250
00:16:43,130 --> 00:16:48,980
ですので、2 N/2 は N で、4 N/4 も N です。下り続けて行って、

251
00:16:48,980 --> 00:16:54,660
D 2 になるまで下ります。マージの追加コストは常に N です。

252
00:16:54,660 --> 00:16:56,940
そしてここに段はいくつあるでしょうか？

253
00:16:56,940 --> 00:17:00,740
すなわち、N を 2 で割って 2 になるまでの回数です。

254
00:17:00,740 --> 00:17:04,630
まさに、2 を底とする N の対数です。というわけで、

255
00:17:04,630 --> 00:17:08,220
マージの全てのコストの総計は、ここの比較している箇所にあるように、

256
00:17:08,220 --> 00:17:12,950
log N の N 倍、N log N です。以上が、図による

257
00:17:12,950 --> 00:17:17,550
証明ですが、これにより漸化式が解けます。

258
00:17:18,600 --> 00:17:24,110
これはもうちょっと数学的なものです。漸化式を下って書いて

259
00:17:24,110 --> 00:17:28,880
両側を N で割っています。

260
00:17:32,090 --> 00:17:38,640
D N 割る N は、D N/2 割る N/2 足す 1 に等しいです。

261
00:17:38,640 --> 00:17:40,480
そう、N で割っています。

262
00:17:40,480 --> 00:17:43,670
これが短縮した漸化式です。

263
00:17:43,670 --> 00:17:47,780
右側の一番目の項は、完全に

264
00:17:47,780 --> 00:17:51,710
左側と同じですから、同じ式を適用できます。

265
00:17:51,710 --> 00:17:55,140
やることは 2 で割って、さらに 1 を加えます。

266
00:17:55,140 --> 00:17:57,570
これを続けて行って

267
00:17:57,570 --> 00:18:00,450
D 1、つまり 0 になるまで下ります。

268
00:18:00,450 --> 00:18:02,990
完了した時、lg N 個の 1 に展開しています。

269
00:18:02,990 --> 00:18:09,510
D N 割る N は log N に等しい、あるいは D N は N log N に等しくなります。

270
00:18:09,510 --> 00:18:11,560
以上が、展開式による証明です。

271
00:18:14,180 --> 00:18:20,560
そして、これらの手法で得られた事のどちらかを使えば、D N は

272
00:18:20,560 --> 00:18:28,890
log N に近似することがわかりますし、漸化式を展開するプログラムを書いてもわかります。

273
00:18:28,890 --> 00:18:33,130
これで D N は

274
00:18:33,130 --> 00:18:39,700
N lg N に等しい事が分かりましたので、元の公式に当てはめることができます。

275
00:18:39,700 --> 00:18:43,100
帰納法の仮説「D N は

276
00:18:43,100 --> 00:18:45,395
 N lg N に等しい」を元に、D 2N は 2N lg 2N に等しいことを示します。

277
00:18:45,395 --> 00:18:52,210
漸化式より D 2N は 2 かける D N に 2N を加えたものです。

278
00:18:52,210 --> 00:18:56,290
N lg N を当てはめると、欲しい結果が得られます。

279
00:18:56,290 --> 00:19:00,190
これと同じアイデアを最初の漸化式に使います。

280
00:19:00,190 --> 00:19:04,770
比較のための配列アクセスにおいて、その実行回数は

281
00:19:04,770 --> 00:19:10,030
マージソートでは N log N に比例すると分かります。

282
00:19:10,030 --> 00:19:14,365
そう、マージソートの実行時間は速いです。

283
00:19:14,365 --> 00:19:18,370
他に知りたい事と言えばメモリです。

284
00:19:18,370 --> 00:19:21,060
マージソートの一つの特性として

285
00:19:21,060 --> 00:19:25,810
通常のアプリケーションにおいて、N に比例する追加容量を使います。

286
00:19:25,810 --> 00:19:29,550
すなわち、最終のマージで追加の補助配列が必要です。

287
00:19:30,880 --> 00:19:34,510
二つのソートされた子配列を使います。Abstract in-place マージについて話しましたが、

288
00:19:34,510 --> 00:19:37,610
厳密には in-place マージではありませんでした。

289
00:19:37,610 --> 00:19:39,410
追加の子配列を使っていました。

290
00:19:40,948 --> 00:19:44,846
というわけで in-place はとても重要です。

291
00:19:44,846 --> 00:19:47,630
何度も、全てをソートします。

292
00:19:47,630 --> 00:19:50,590
ソートするための要素をメモリに入れて、それからソートします。

293
00:19:51,620 --> 00:19:57,380
シェルソートでの走査と選択処理は in-place です。追加配列は使いません。

294
00:19:57,380 --> 00:20:00,500
しかし、マージソートは、使えるメモリの半分しか、実際にはソートできません。

295
00:20:00,500 --> 00:20:05,920
なぜならば、補助配列により追加の半分が必要だからです。

296
00:20:05,920 --> 00:20:08,910
もし今学んでいる事が簡単だと感じているならば、

297
00:20:08,910 --> 00:20:13,800
厳密な in-place マージのアイデアについて考えてみてください。

298
00:20:13,800 --> 00:20:16,530
これを実現するために多くの手法が考案されてきました。

299
00:20:16,530 --> 00:20:19,420
理論上可能でありますが、それらの手法は

300
00:20:19,420 --> 00:20:22,980
実際に使うには、一般的に見て複雑すぎて、

301
00:20:22,980 --> 00:20:24,310
使われていません。

302
00:20:24,310 --> 00:20:28,060
しかし、in-place マージを実現する簡単な方法が出てくる可能性はあります。

303
00:20:28,060 --> 00:20:31,500
新たな偉大なアルゴリズムが発見されることを待ち望んでいます。

304
00:20:31,500 --> 00:20:34,480
今のところ、いくつか現実的な改善策があります。

305
00:20:34,480 --> 00:20:39,690
マージソートをちょっとした方法でより効果的にできます。

306
00:20:39,690 --> 00:20:41,930
その方法はすでに見た事があるものです。これから見ていきますが、

307
00:20:41,930 --> 00:20:48,150
他のアルゴリズム向けの手法を用いる例になります。

308
00:20:48,150 --> 00:20:53,640
まず一つに、マージソートは小さい配列には複雑すぎます。

309
00:20:53,640 --> 00:20:58,880
子配列が、二つ、三つ、四つだとしたら、

310
00:20:58,880 --> 00:21:03,950
何度も再帰呼び出しを行なうのは、オーバーヘッドが多過ぎ、効果的ではありません。

311
00:21:03,950 --> 00:21:09,660
さらに悪い事に、再帰的なソートは

312
00:21:09,660 --> 00:21:13,480
ソート時にたくさんの子配列があることが明らかです。

313
00:21:13,480 --> 00:21:17,290
一つの改善案は挿入ソートを使う事です。

314
00:21:17,290 --> 00:21:22,510
切り出して、小さい子配列に対しては挿入ソートを使い、効率を上げます。

315
00:21:22,510 --> 00:21:26,790
このコードをマージソートに加える事で、かなり速くなります。

316
00:21:26,790 --> 00:21:27,490
おそらく 20% は速くなります。

317
00:21:29,140 --> 00:21:33,330
二つ目の改善策は

318
00:21:33,330 --> 00:21:38,520
配列が部分的にソートされている場合に限り、性能が良くなります。

319
00:21:38,520 --> 00:21:40,950
すでにソートされていたら止めるというだけです。

320
00:21:40,950 --> 00:21:44,120
どういう場合に起こるかというと、

321
00:21:44,120 --> 00:21:48,190
一番目の半分の最大値が、二番目の最小値以下の時です。

322
00:21:48,190 --> 00:21:49,990
もう用済みということです。

323
00:21:49,990 --> 00:21:51,080
簡単ですね。

324
00:21:51,080 --> 00:21:53,860
そのためには、マージソートの再帰内でチェックを仕込むだけです。

325
00:21:53,860 --> 00:21:57,880
この一行のコードを通ることで、すでに整列済みかどうかチェックします。

326
00:21:57,880 --> 00:22:00,160
そうすれば、例えば、

327
00:22:00,160 --> 00:22:03,560
すでに整列済みの配列に対してマージソートを行なったなら、

328
00:22:03,560 --> 00:22:09,880
毎回するのはこのチェックだけですので、線形時間で済みます。

329
00:22:09,880 --> 00:22:13,520
それなりに役に立ちます。全てのケースに当てはまらないですが。

330
00:22:13,520 --> 00:22:15,490
効果が現れる状況はたくさんあると思います。

331
00:22:18,120 --> 00:22:23,470
もう一つのできる事は、ちょっと突拍子もないので、

332
00:22:23,470 --> 00:22:28,370
熟練者のみにおすすめします。

333
00:22:28,370 --> 00:22:33,320
補助配列への移し替えの時間を稼ごうというものです。

334
00:22:33,320 --> 00:22:36,650
言って見れば、入力の役割を、

335
00:22:36,650 --> 00:22:40,520
再帰呼び出しの度に、補助配列と切り替えることができます。

336
00:22:40,520 --> 00:22:43,120
補助配列自体は必要ですが

337
00:22:43,120 --> 00:22:48,160
こんな感じのコードを書けます。[COUGH]

338
00:22:48,160 --> 00:22:52,240
配列をソートする際は、もう一方の配列に結果を入れます。

339
00:22:52,240 --> 00:22:55,240
配列をマージする際は、最初の配列に戻します。

340
00:22:55,240 --> 00:22:59,930
再帰呼び出しの引数の交換で、それが出来ます。

341
00:22:59,930 --> 00:23:02,490
効果的で、要素を実際に移動する必要がないことを意味します。

342
00:23:02,490 --> 00:23:04,890
少し時間を節約できます。

343
00:23:06,870 --> 00:23:09,630
ここに視覚化したものがあります。

344
00:23:09,630 --> 00:23:15,110
実際のマージソートがどのようなものかです。

345
00:23:15,110 --> 00:23:19,770
小さな子ファイルに切り出したものです。

346
00:23:19,770 --> 00:23:25,360
このソートがどのように仕事を終えるか視覚的に掴めます。

347
00:23:25,360 --> 00:23:28,828
最初の小さな塊、そして次の小さな塊、

348
00:23:28,828 --> 00:23:32,429
それからそれらをマージ、等々と続いていきます。

349
00:23:32,429 --> 00:23:34,765
視覚的に良い見せ方です。

350
00:23:34,765 --> 00:23:40,577
マージソートがどのように仕事を終えるかを示しています。以上が基本となる

351
00:23:40,577 --> 00:23:45,650
マージソートアルゴリズムです。次は違ったバージョンを見ていきましょう。