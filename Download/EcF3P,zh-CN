1
00:00:01,078 --> 00:00:08,004
现在我们来将用来解决
动态连通性问题算法的第一种实现

2
00:00:08,004 --> 00:00:14,012
叫做快速查找 这是一种
用于求解此类问题的所谓贪心算法 

3
00:00:14,012 --> 00:00:20,013
我们将要用来支持这个算法的数据结构

4
00:00:20,013 --> 00:00:25,082
是一个简单的对象索引整数数组

5
00:00:25,082 --> 00:00:31,099
具体来说就是两个对象P与Q是连通的
当且仅当 

6
00:00:31,099 --> 00:00:39,005
他们在数组中的项是一样的
那么 比如这个例子中

7
00:00:39,005 --> 00:00:46,099
id数组中的10个对象描述了
图中表示的七个连接操作之后的情形

8
00:00:46,099 --> 00:00:53,349
所以 此时0、5、6都在同一个
连通分量中

9
00:00:53,349 --> 00:00:59,578
因为他们有相同的对应的数组项 0

10
00:00:59,578 --> 00:01:05,171
1、2、7对应的项都是1
而3、4、8

11
00:01:05,171 --> 00:01:10,664
9对应的项都是8
所以这种表示说明他们是连通的

12
00:01:10,664 --> 00:01:16,636
显然这种表示能够支持查找操作的一种快速实现

13
00:01:16,636 --> 00:01:22,439
我们只需要检查数组项是否相等。检查P与Q

14
00:01:22,439 --> 00:01:27,904
是否具有相同的id。所以，6和1的id不同。1的id是1，6的id

15
00:01:27,904 --> 00:01:34,171
是0。它们不在相同的连通分量中。合并操作难一些

16
00:01:34,171 --> 00:01:40,981
为了合并包含两个给定对象的两个分量，我们需要将所有

17
00:01:40,981 --> 00:01:47,755
与给定对象之一相同id对应的项变为
另一给定对象对应的项。我们不妨

18
00:01:47,755 --> 00:01:53,634
选择将与P相同的数组项变为与Q相同的数组项

19
00:01:53,634 --> 00:01:58,898
那么如果我们要合并6和1
我们必须改变0、5和6等项

20
00:01:58,898 --> 00:02:04,741
即每一个和6在相同连通分量的项
从0变为1

21
00:02:04,741 --> 00:02:10,917
而这样实现合并操作 接下来我们会看到 
当对象数目很大时 会出现一些问题

22
00:02:10,917 --> 00:02:16,927
因为会有很多值需要变
但这个算法依然容易实现

23
00:02:16,927 --> 00:02:23,263
所以我们把它作为我们的出发点 那么
我们先来演示一下这个算法是如何运行的

24
00:02:23,263 --> 00:02:31,189
首先 我们设置id数组的都每一项
等于它的索引

25
00:02:31,189 --> 00:02:37,932
这说明所有的对象都是独立的

26
00:02:37,932 --> 00:02:43,918
它们在自己的连通分量中 现在
我们进行一个合并操作 比如说

27
00:02:43,918 --> 00:02:49,694
4将要和3合并 我们将

28
00:02:49,694 --> 00:02:56,190
所有与第一个id项相同的项变为
第二个id的项 所以这个情形中

29
00:02:56,190 --> 00:03:02,061
我们将3与4连通
意味着我们需要将4变为3

30
00:03:02,061 --> 00:03:10,259
我们继续进行几个操作 
这样你就会明白它是如何运行的

31
00:03:10,259 --> 00:03:13,657
那么3和8 现在 要连接3和8
那么3和4必须和8相连

32
00:03:13,657 --> 00:03:19,950
所以3和4对应的项就应该变为8
对吧 然后 6和5呢

33
00:03:19,950 --> 00:03:26,026
同样的 我们把第一个项变得和第二个相同

34
00:03:26,026 --> 00:03:32,332
那么要连通6和5 我们就把6变成5
那么 9和4该怎么连通呢？

35
00:03:32,332 --> 00:03:39,789
要连接9和4 我们必须把9的项变成4的项

36
00:03:39,789 --> 00:03:45,325
所以现在3、4、8、9对应的项都是8

37
00:03:45,325 --> 00:03:52,365
他们在相同的连通分量中 
合并2和1意味着

38
00:03:52,365 --> 00:04:00,013
我们将2变为1使得2和1相连
8和9已经相连了

39
00:04:00,013 --> 00:04:06,660
它们在id数组中具有相同的项
所以 那个查找请求返回 “是”

40
00:04:06,660 --> 00:04:13,096
表示它们已经连通了 
5和0对应的项不同 它们不连通

41
00:04:13,096 --> 00:04:21,780
所以返回“否” 这种情况下 表示不连通
接下来如果要

42
00:04:21,780 --> 00:04:31,617
连接5和0 和之前我们连接一样

43
00:04:31,617 --> 00:04:39,855
把5和6对应的项变为0
7和2 合并7和2

44
00:04:39,865 --> 00:04:49,623
这个很简单 合并6和1 
那么有三项必须变

45
00:04:49,623 --> 00:04:57,899
所有的0都要变成1 这就是
关于快速查找算法的一个简短的演示

46
00:04:57,899 --> 00:05:04,126
接下来我们看实现它的代码

47
00:05:04,126 --> 00:05:10,628
当我们对这个具体的演示已经有概念以后
编写这个算法的代码就相当直接了

48
00:05:10,628 --> 00:05:16,518
尽管这个是有意思的编程练习
但我们当中很多人第一次做仍会犯错

49
00:05:16,518 --> 00:05:23,312
那么让我们从构造器开始

50
00:05:23,312 --> 00:05:29,125
我们有一个私有的整数数组
那就是我们的id数组

51
00:05:29,125 --> 00:05:33,953
是用来支持这个实现的数据结构

52
00:05:33,953 --> 00:05:40,637
构造器创建了这个数组
并将对应索引的数组项设为索引值

53
00:05:40,637 --> 00:05:47,200
显而易见 查找操作或者连通判断操作
那都是简单的操作

54
00:05:47,200 --> 00:05:53,024
这就是快速查找算法
因为它只需要两个参数

55
00:05:53,024 --> 00:05:58,552
P和Q 然后检查他们的id项
是否相等并返回判断值

56
00:05:58,552 --> 00:06:04,077
如果它们相等 返回“真”
如果它们不相等 返回“假”

57
00:06:04,077 --> 00:06:09,942
下面这个合并操作的实现更复杂一些

58
00:06:09,942 --> 00:06:15,803
我们首先找到第一个参数对应的id项
然后是第二个参数对应的id项

59
00:06:15,803 --> 00:06:21,018
然后我们遍寻整个数组

60
00:06:21,018 --> 00:06:27,068
找到与第一个参数的id相等的id项

61
00:06:27,068 --> 00:06:32,565
并把该项设为第二个参数的id项
这是一种相当直接的实现

62
00:06:32,565 --> 00:06:38,156
我之前提过我们很多人或出错
我们可能犯的错误是

63
00:06:38,156 --> 00:06:43,660
将p的索引值放在这里而不是首先取出它的项
你们想想这种实现

64
00:06:43,660 --> 00:06:48,672
那是一个很隐秘的错误 那么

65
00:06:48,672 --> 00:06:54,900
以上就是快速查找算法一种精细的实现
接下来我们要知道这个算法效率如何

66
00:06:54,900 --> 00:07:01,152
我们会介绍一些关于如何做这个分析的细节

67
00:07:01,152 --> 00:07:07,088
但对于这个算法我们只需要考虑
代码需要访问数组的次数就足够了

68
00:07:07,088 --> 00:07:12,901
正如我们在实现的过程中所看到的

69
00:07:12,901 --> 00:07:19,019
初始化和合并操作都包含了
扫描整个数组的for循环

70
00:07:19,019 --> 00:07:25,469
所以它们必须以常数正比于N次访问数组

71
00:07:25,469 --> 00:07:32,155
查找操作很快
只需要进行常数次查找数组项

72
00:07:32,155 --> 00:07:37,829
这是有问题的 因为合并操作代价太大了

73
00:07:37,829 --> 00:07:45,708
特别是如果你需要在N个对象上
进行N次合并操作 这就是不合理的

74
00:07:45,708 --> 00:07:52,515
只是判断它们是否连通
就需要正比于N的平方的时间

75
00:07:52,515 --> 00:07:58,458
这门课中我们会反复强调的一个主题
就是平方量级的时间太慢了

76
00:07:58,458 --> 00:08:04,531
对于大型问题
我们不能接受需要平方时间的算法

77
00:08:04,531 --> 00:08:10,796
原因在于它们无法成比例适应大规模问题

78
00:08:10,796 --> 00:08:16,305
当计算机变得更快更大
平方时间算法实际上变得更慢

79
00:08:16,305 --> 00:08:22,464
我大概解释一下我这么说是什么意思
粗略地计算一下

80
00:08:22,464 --> 00:08:29,206
当今而言 我们有每秒能够进行
几十亿次操作的计算机

81
00:08:29,206 --> 00:08:34,815
这些计算机的主内存中有几十亿项
这表示你可以

82
00:08:34,815 --> 00:08:40,916
在大约一秒钟的时间内访问主内存所有的项
这是一个相当奇妙的事实

83
00:08:40,916 --> 00:08:46,907
这个粗略的标准已经被保持了50至60年
计算机变得越来越大

84
00:08:46,907 --> 00:08:52,735
但也变得更快
所以访问内存中的每一项只需要几秒钟

85
00:08:52,735 --> 00:08:57,403
当计算机的内存只有几千个字的时候
这是成立的

86
00:08:57,403 --> 00:09:04,657
现在计算机的内存有几十亿个字甚至更多
这依然是成立的 现在我们假设

87
00:09:04,657 --> 00:09:11,873
有一台拥有了那么巨大的内存计算机

88
00:09:11,873 --> 00:09:17,712
我们可以处理巨大的问题
所以我们能够拥有几十亿个对象

89
00:09:17,712 --> 00:09:23,608
并且希望能对它们进行几十亿个操作
但是对于那个快速查询算法

90
00:09:23,608 --> 00:09:29,770
需要10的18次方个操作 
或者说需要访问数组这么多次

91
00:09:29,770 --> 00:09:35,098
或者需要访问这么多次内存
如果你计算一下 这需要30多年的计算时间

92
00:09:35,098 --> 00:09:42,033
很显然在现在的计算机上
处理这样的问题是不现实的

93
00:09:42,033 --> 00:09:48,057
原因就在于问题出在二次方时间算法不能成比例适用于新的技术

94
00:09:48,057 --> 00:09:54,097
也许你拥有一台比现在的快10倍的
新计算机

95
00:09:54,097 --> 00:10:00,033
但你可能遇到一个10倍大的问题
那么使用平方时间算法处理这个问题

96
00:10:00,033 --> 00:10:06,028
花的时间就要多10倍 这就是我们

97
00:10:06,028 --> 00:10:11,048
通过设计更高效的算法
来解决这样的问题努力避免的情形

98
00:10:11,048 --> 00:10:13,020
通过设计更高效的算法
来解决这样的问题努力避免的情形