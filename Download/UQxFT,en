1
00:00:01,072 --> 00:00:07,004
Now we'll look at the problem that's
related to sorting called selection that's

2
00:00:07,004 --> 00:00:12,028
also well solved by Quicksort
partitioning. This is a simpler problem.

3
00:00:12,028 --> 00:00:17,099
We're given an array of n items that are
ordered and our task is to find the k-th

4
00:00:17,099 --> 00:00:23,007
largest. There's lots of important
applications for this. So like if we

5
00:00:23,007 --> 00:00:27,935
wanted to find the minimum item that's k =
zero or the maximum item that's k = n -

6
00:00:27,935 --> 00:00:34,014
one or the medium that's k = n/2. And
there's many kinds of applications from

7
00:00:34,014 --> 00:00:39,064
people processing data. I wanted to find
the top k or the medium or other order

8
00:00:39,064 --> 00:00:45,001
statistics so that's what selection is all
about. Now, here's an example where we

9
00:00:45,001 --> 00:00:49,034
want to use theory as a guide. What kind
of efficiency might we expect in a

10
00:00:49,034 --> 00:00:53,054
selection algorithm. Well, first of all,
it's easy to see that we can solve

11
00:00:53,054 --> 00:00:57,093
selection and in law at end time. How
would we do that? Well, we just sort the

12
00:00:57,093 --> 00:01:02,054
array and then if we want to find the
smallest, we'll look at the first position

13
00:01:02,054 --> 00:01:07,009
or the largest, we'll look in the last
position or the medium, we'll look in the

14
00:01:07,009 --> 00:01:14,669
middle. In fact, if k is small, the
running time is going to be proportional

15
00:01:14,669 --> 00:01:18,851
to n. Because if you're looking for the
smallest, you can just go through the

16
00:01:18,851 --> 00:01:23,756
array and find the small or the smallest
in one pass through or if you're two,

17
00:01:23,756 --> 00:01:28,946
you'll find it and two passes through. So,
you can imagine trying to look for a

18
00:01:28,946 --> 00:01:34,049
selection algorithm that takes time
proportional to n and also the lower bound

19
00:01:34,049 --> 00:01:38,059
is n because you have to look at
everything. If you don't look at

20
00:01:38,059 --> 00:01:43,498
everything, you might miss the one item
that you're looking for. So, from these

21
00:01:43,498 --> 00:01:50,166
observations it's clear that what we, what
we'd like is a selection algorithm that

22
00:01:50,166 --> 00:01:56,535
takes linear time. But at this point, the
question is, is there a linear time

23
00:01:56,535 --> 00:02:02,495
algorithm that works for every k? Or
possibly selection is as hard as sorting.

24
00:02:02,760 --> 00:02:10,567
This kind of question plagued a lot of
people in this late 60's or early 70's as

25
00:02:10,567 --> 00:02:17,199
these types of problems emerge for
computing applications. So, it's an

26
00:02:17,199 --> 00:02:25,948
interesting question to think about for
sure. Well in his original paper in 1961

27
00:02:26,237 --> 00:02:33,415
Hoare gave a solution to the selection
problem based on partitioning. And the

28
00:02:33,415 --> 00:02:41,007
idea is just a version of Quicksort in a
way. We're going to do our partitioning so

29
00:02:41,007 --> 00:02:45,982
that we get entry a(j) in place of the
array. Nobody to the left is larger,

30
00:02:45,982 --> 00:02:51,663
nobody to the right is bigger. But then,
when we're doing selection, what we'll do

31
00:02:51,663 --> 00:02:57,722
is just go in one sub array or the other
depending on where j is. If j = k, we're

32
00:02:57,722 --> 00:03:03,462
done, we've found the k is the largest. If
k is to the left of j, then, we just do

33
00:03:03,462 --> 00:03:08,863
the left sub-file which is set high to j -
one. And if k is to the right of j, we

34
00:03:08,863 --> 00:03:14,582
just do the right subfiles that load the j
+ one and that's all this code does is

35
00:03:14,582 --> 00:03:19,541
that it, we could do a recursive, a
recursive call but this just does it by

36
00:03:19,541 --> 00:03:25,282
resetting the values of the parameters. Do
one partition then check whether you to

37
00:03:25,499 --> 00:03:30,681
your k-th element is going to be on the
left part or the right part and reset

38
00:03:30,681 --> 00:03:36,275
lower high accordingly. If it's equal,
then you found it and you return it and

39
00:03:36,275 --> 00:03:42,588
you keep going until you get to a point
where you have only one element. That's

40
00:03:42,588 --> 00:03:48,146
the a Quicksort like implementation
solving the selection problem. Notice

41
00:03:48,146 --> 00:03:54,080
again that it depends on the random
shuffle at the beginning that's going to

42
00:03:54,080 --> 00:04:01,509
be important for performance. Alright. So
there needs to be a mathematical analysis

43
00:04:01,509 --> 00:04:08,060
to, to characterize the running time of
this program in the fact is that quick

44
00:04:08,060 --> 00:04:14,402
select this method takes linear time on
the average. We won't give the full proof.

45
00:04:14,402 --> 00:04:19,727
It's actually quite a bit more complicated
than the one just on for Quick sort. But

46
00:04:19,727 --> 00:04:25,050
intuitively, we can see kind of what
happens each partitionings that maybe

47
00:04:25,050 --> 00:04:31,006
splits the array approximately in half. So
that, that means you'd have, if you did

48
00:04:31,006 --> 00:04:38,075
exactly and [inaudible] + n/2 + n/4 and so
forth which adds up to about two N compare

49
00:04:38,075 --> 00:04:43,841
so linear cross. If you do the, actually
it doesn't cut it in half at exactly each

50
00:04:43,841 --> 00:04:50,172
time only on average so you need a fuller
analysis like the one we did for Quicksort

51
00:04:50,389 --> 00:04:56,478
and the bottom line of that analysis gives
the number of comparisons required as a

52
00:04:56,478 --> 00:05:03,127
function of n and of k in terms of this
formula here and if you plug in k = n/2,

53
00:05:03,127 --> 00:05:09,172
you get the result that the number of
compares required to fine the median

54
00:05:09,433 --> 00:05:15,710
that's the highest value this formula can
take is two + two natural log of two. So,

55
00:05:15,710 --> 00:05:22,000
linear time to find the k-th largest for
any value of k. Now again it's going to

56
00:05:22,000 --> 00:05:27,308
use, this is a method that's linear time
on the average. It's actually going to be

57
00:05:27,308 --> 00:05:32,257
quadratic in the worst case but again, the
chance of that it will happen with a

58
00:05:32,257 --> 00:05:37,248
random shuffle is less than the chance
that we'll be struck by lightning. Its a

59
00:05:37,248 --> 00:05:44,215
probabilistic guaranteed fast algorithm.
Now, from a theoretical standpoint that's

60
00:05:44,215 --> 00:05:50,323
a little unsatisfied and in, in 1973,
there's a famous paper that found a

61
00:05:50,323 --> 00:05:56,323
compared base selection algorithm that
guarantees to solve the problem in linear

62
00:05:56,323 --> 00:06:03,372
time. This is areal landmark in the theory
of algorithms because for a long time,

63
00:06:03,372 --> 00:06:09,261
it's not known, we knew we could have the
average case, the linear time but could we

64
00:06:09,261 --> 00:06:15,671
find a worst case? And this paper found
such a construction. Now in practice, this

65
00:06:15,671 --> 00:06:22,020
construction is, is rather high. So, the
method is not really used in practice. And

66
00:06:22,020 --> 00:06:28,201
so, there is still the goal of a, of a
fast guaranteed linear time selection

67
00:06:28,201 --> 00:06:34,300
algorithm maybe somebody in this class
will invent someday. This is another

68
00:06:34,300 --> 00:06:39,831
example where we use theory as a guide.
It's still worth while to look for a

69
00:06:39,831 --> 00:06:44,022
practical linear time worst case
algorithm. Well then, maybe somebody in

70
00:06:44,022 --> 00:06:49,298
this class will invent that but until
something like that is discovered use the

71
00:06:49,298 --> 00:06:54,037
quick select based on Quicksort
partitioning you can get linear time

72
00:06:54,037 --> 00:06:59,068
selection when you don't need a full sort.
That selection of simple problem like

73
00:06:59,068 --> 00:07:09,038
sorting that is well sound with Quicksort
partitioning.