1
00:00:02,880 --> 00:00:06,853
مرحبا بكم ثانية، سنتحدث اليوم
عن أشجار البحث المتزنة،

2
00:00:06,853 --> 00:00:12,150
والتي ستقودنا لتطبيق نهائي لجدول
الرموز والذي يمكن أن يقدم أداء سريعا

3
00:00:12,340 --> 00:00:17,130
لجميع الخيارات الخاصة بالمحاكاة
التي تعرّفنا عليها، وهذا مضمون.

4
00:00:17,130 --> 00:00:22,038
لذا لدينا هنا مراجعة حول أين كنا فيما يتعلّق
بالجداول المنفردة.

5
00:00:22,255 --> 00:00:27,019
تعرّفنا في المرة السابقة على أشجار البحث
الثنائي،

6
00:00:27,236 --> 00:00:32,866
والتي تمتلك أداءا عظيما في حال كون
الأمور مركبة جيدا بامتدادات عشوائية.

7
00:00:33,083 --> 00:00:39,002
فهي ذات قدرة على تنفيذ عمليات البحث والإدخال
في وقت متناسب مع اللوغاريتم للأساس 2 كما

8
00:00:39,002 --> 00:00:44,055
أنها تدعم العمليات المرتبة.
لكن هدفنا في الواقع هو أن نجعل هذه

9
00:00:44,055 --> 00:00:48,386
العمليات مضمونة لأن تأخذ وقتا متناسبا مع
اللوغاريتم .

10
00:00:48,603 --> 00:00:54,114
حيث أننا لا نملك التحكم بترتيب 
العمليات والتي قد لا تكون

11
00:00:54,114 --> 00:00:57,606
عشوائية أبدا. 
وفي الواقع في كثير من التطبيقات الحقيقية،

12
00:00:57,606 --> 00:01:01,733
لا تكون عشوائية بشكل كبير.
إذن فهذا ما نريد أن ننظر إليه الآن

13
00:01:01,733 --> 00:01:07,320
وهو محاولة لإيجاد تطبيق يضمن
أن يكون سريعا لجميع عمليات

14
00:01:07,320 --> 00:01:09,260
جدول الرموز.

15
00:01:09,260 --> 00:01:14,172
هذا هو التحدي الذي نواجهه.
لذا ما سنتحدث عنه من أجل فعل ذلك

16
00:01:14,172 --> 00:01:19,744
هو عبارة عن خوارزمية، وهي في الحقيقة
خوارزمية قديمة تسمى أشجار 2-3، و

17
00:01:19,744 --> 00:01:25,457
هي تطبيق استثنائي يتطلب
القليل من الكود، ويسمى أشجار

18
00:01:25,457 --> 00:01:31,381
البحث الثنائي الأحمر والأسود وبعدها سنتحدث
حالة أعم وتسمى أشجار B. وهذه

19
00:01:31,381 --> 00:01:36,460
الطرق مستخدمة بشطل واسع عبر
بنيتنا التحتية الحاسوبية.

20
00:01:38,500 --> 00:01:45,187
في البداية لنتحدث عن أشجار البحث 2-3،
وهي عبارة عن نموذج الذي يقف وراء

21
00:01:45,406 --> 00:01:50,148
التطبيق المختصر والفعّال الذي سنلقي
نظرة عليه.

22
00:01:50,148 --> 00:01:56,131
شجرة 2-3 هي طريقة لتعميم 
أشجار البحث الثنائي لتوفر المرونة التي

23
00:01:56,131 --> 00:02:00,728
نحتاجها لضمان الأداء السريع.
والفكرة بسيطة جدا،

24
00:02:00,728 --> 00:02:06,127
سنسمح فقط بمفتاح أو اثنين لكل عقدة.
ما معناه أن سنسمح بتمكين

25
00:02:06,127 --> 00:02:09,994
شيء ما يسمى بالعقدة 3 والتي يمكنها حمل
مفتاحين،

26
00:02:09,994 --> 00:02:15,674
لكنها عند ذلك عليها أن تمتلك ثلاثة أبناء.
في شجرة البحث الثنائي العادية أي العقدة 2 لدينا

27
00:02:15,674 --> 00:02:20,190
رابط واحد للمفاتيح الأقل من 
المفتاح الموجود في العقدة، ورابط واحد

28
00:02:20,190 --> 00:02:24,279
للمفاتيح الأكبر.
في العقدة 3 لدينا ثلاث روابط، واحد

29
00:02:24,279 --> 00:02:29,867
للأقل، وواحد بين الإثنين، وواحد للأكبر.
خاصية أخرى لأشجار 2-3 هي

30
00:02:29,867 --> 00:02:35,029
حصولنا على توازن تام،
بمعنى أن أي مسار

31
00:02:35,029 --> 00:02:38,790
سيكون له نفس الرابط في 
شجرة 2-3.

32
00:02:38,790 --> 00:02:46,121
فكما ذكرت فإن الترتيب المتماثل هو
جزء من تعريف شجرة 2-3.

33
00:02:46,121 --> 00:02:51,648
كل عقدة 3 لها ثلاث روابط ومفتاحان.
الرابط الأيسر خاص بالمفاتيح التي 

34
00:02:51,648 --> 00:02:56,850
تؤشر على شجرة 2-3 ذات مفاتيح
أصغر من المفتاحين الموجودين

35
00:02:56,850 --> 00:03:01,077
في العقدة 3.
الرابط الأوسط يؤشر على شجرة 2-3 التي

36
00:03:01,077 --> 00:03:04,459
تحتوي على جميع المفاتيح الموجودة بين
المفتاحين.

37
00:03:04,459 --> 00:03:09,661
أما الرابط الأيمن فيؤشر على شجرة 2-3
التي تحتوي على جميع المفاتيح الأكبر

38
00:03:09,661 --> 00:03:12,913
من المفتاح الأكبر بين المفتاحين الموجودين في
العقدة 3.

39
00:03:12,913 --> 00:03:17,010
حسنا، لنلقي نظرة على استعراض
للبحث في شجرة 2-3.

40
00:03:17,010 --> 00:03:23,407
لنفرض أن لدينا شجرة 2-3 هذه وأننا
نريد أن نبحث إذا ما كانت H واحدة

41
00:03:23,407 --> 00:03:26,818
من المفاتيح الموجودة في الشجرة.
لذا سنبدأ من الجذر،

42
00:03:26,818 --> 00:03:30,815
نقارن مفتاح البحث مع المفتاح أو 
المفاتيح الموجودة في العقدة.

43
00:03:30,815 --> 00:03:36,436
ونتتبع الرابط الذي يتوافق مع الفترة 
التي نعرف أنها ينبغي أن تحتوي

44
00:03:36,436 --> 00:03:41,923
على مفتاح البحث انطلاقا من تعريف الشجرة
ومن ثم نتابع البحث عن طريق الاستدعاء الذاتي.

45
00:03:41,923 --> 00:03:47,409
فإذا كنا نبحث عن H، فهي أقل من M، لذا
 فالمكان الوحيد الذي يمكن أن تحتله في

46
00:03:47,409 --> 00:03:50,051
شجرة 2-3 هذه هو في شجرة 2-3 الموجودة على
يسار الرابط،

47
00:03:50,051 --> 00:03:54,656
لذا سنتبع الرابط الأيسر.
الآن نقارن H مع E و J، و في

48
00:03:54,656 --> 00:04:00,359
هذه الحالة هي بينهما، لذا سنقوم
الآن بأخذ الرابط الأوسط، ذلك

49
00:04:00,359 --> 00:04:06,212
المكان الوحيد الذي يمكن لـ H أن توجد فيه. في هذه
الحالة، تلك العقدة، أو شجرة 2-3 أحادية العقدة

50
00:04:06,212 --> 00:04:11,315
المحتوية على H، لذا فهذا بحث مصيب.
لنأخذ مثالا آخر على

51
00:04:11,315 --> 00:04:15,217
بحث غير ناجح، لمفتاح ليس موجودا في
الشجرة.

52
00:04:15,217 --> 00:04:19,270
كالعادة علينا أن نبدأ من الجذر.
وبما أنه أقل، علينا أن نتجه يسارا.

53
00:04:19,270 --> 00:04:23,383
وهي أقل من كلا المفتاحين،
لذا إن كانت في الشجرة فستكون

54
00:04:23,383 --> 00:04:26,982
في الرابط الأيسر وموجودة بين هذين
المفتاحين.

55
00:04:26,982 --> 00:04:31,540
لذا فإن كان موجودا في الشجرة فسيكون
في الرابط الأوسط.

56
00:04:31,540 --> 00:04:34,922
وهذا الرابط هو معدوم، لذا فهذا البحث
لم يفلح.

57
00:04:34,922 --> 00:04:40,951
إذاً فالبحث هو تعميم طبيعي
لعملية البحث ، في أشجار البحث الثنائية.

58
00:04:41,172 --> 00:04:46,675
والآن ماذا عن الإدخال
حسناً ، إنها عملية مشابهة 

59
00:04:46,675 --> 00:04:53,502
لأشجار البحث الثنائية العادية ، باستثناء
أننا نقوم بتعديل العقدة الثانية و العقدة-3

60
00:04:53,502 --> 00:04:58,964
حافظ على التوازن الأمثل للشجرة, والطريقة الاسهل هي ايصال المفتاح إلى حيث يجب ان يكون في العقدة الثنائية node-2 في الاسفل, كالعقدة M مثلا

61
00:04:58,964 --> 00:05:04,930
لدينا node-2 في الاسفل كالعقدة M مثلا وعلى فرض اننا نريد اضافة  K بحيث قيمة K اصغر من M

62
00:05:04,930 --> 00:05:09,762
ولذلك يجب علينا الذهاب يسارا ولكن K اكبر من كلا المفتاحين E , J لذلك علينا الذهاب

63
00:05:09,762 --> 00:05:14,030
يمينا, ونجد ان K اصغر من L وبالتالي فان عملية البحث انتهت عند

64
00:05:14,030 --> 00:05:19,219
الرابط اليساري لـ L ولاتمام عملية الاضافة فاننا بحاجة إلى

65
00:05:19,219 --> 00:05:23,990
استبدال node-2 بـ node-3 إي علينا استبدال العقدة التي تمتلك ابنين بعقدة لها ثلاثة ابناء او بمعنى آخر استبدال العقدة الثنائية بعقدة ثلاثية تحتوي K

66
00:05:23,990 --> 00:05:28,676
الآن, K قد تمت اضافتها إلى tree 2-3 وهي مستوفية لجميع الشروط او القواعد

67
00:05:28,886 --> 00:05:34,553
ولو اردنا الآن الاضافة على هذه node-3 علينا القيام بمزيد من العمل

68
00:05:34,553 --> 00:05:40,149
وهذا العمل هو اننا سنقوم باضافة key إلى node-3 لانشاء

69
00:05:40,149 --> 00:05:45,955
node-4 مؤقتة ومن ثم تقسيم هذه العقدة المؤقتة ونقل الـ Key الذي يقع في المنتصف إلى

70
00:05:45,955 --> 00:05:48,403
العقدة الأب, دعونا نطبق مثالا على ذلك

71
00:05:48,613 --> 00:05:54,000
اذا اردنا اضافة Z إلى هذه الشجرة , والتي هي أكبر من  M, لذلك فاننا سنذهب

72
00:05:54,000 --> 00:05:59,770
يمينا, ولكنها أكبر من R , ولهذا علينا الذهاب يمينا, والآن هي أكبر من X

73
00:05:59,770 --> 00:06:05,779
ولكن المؤشر اليميني لـ X هو null , عملية البحث انتهت

74
00:06:05,779 --> 00:06:11,935
ماذا علينا أن نفعل لاضافة Z إلى هذه العقدة الثلاثية,وما هي الطريقة لفعل ذلك

75
00:06:11,935 --> 00:06:15,820
اولا يجب علينا استبدال العقدة الثلاثية بعقدة رباعية مؤقتة

76
00:06:15,820 --> 00:06:23,339
العقدة الرباعية هي عقدة لها ثلاثة مفاتيح واربع مؤشرات

77
00:06:23,339 --> 00:06:27,705
ولكن ماهو الواجب فعله لتقسيم هذه العقدة الرباعية node-4

78
00:06:27,705 --> 00:06:34,436
وتمرير المفتاح الاوسط إلى العقدة الأب في الأعلى,
نقسمها إلى عقدتين ثنائيتين  node-2

79
00:06:34,436 --> 00:06:40,502
ونمرر المفتاح الأوسط إلى الأعلى.
هذا نوع من السحر

80
00:06:40,502 --> 00:06:45,407
ولكن صدقوني , تطبيقها برمجيا هو اسهل من رسمها

81
00:06:45,407 --> 00:06:50,834
الآن يمكنك رؤية ذلك, هذا التحول المحلي على tree 2-3 يكمل

82
00:06:50,834 --> 00:06:54,366
عملية الاضافة.
الآن ماذا لو كان الأب هو بالاصل عقدة ثلاثية node-3

83
00:06:54,366 --> 00:06:59,924
سيصبح عقدة رباعية node-4 مؤقتة وسنتابع العملية كما رأينا سابقا -أي نقوم بتقسمه إلى عقدتين ثنائيتين ونقل المفتاح الاوسط إلى الأب في الأعلى وهكذا-

84
00:07:00,120 --> 00:07:03,913
كاذ ذلك مثال عملي على عمليات الاضافة والبحث في الاشجار tree 2-3

85
00:07:03,913 --> 00:07:06,660
دعنا نلقي نظرة على التقسيم المتتالي

86
00:07:06,660 --> 00:07:10,039
لنقول اننا نريد اضافة L, إلى هذه الشجرة.

87
00:07:10,039 --> 00:07:16,296
إنها ستذهب للأسفل في المنتصف ووضعها في مكانها يتطلب اضافتها إلى عقدة ثلاثية node-3

88
00:07:16,296 --> 00:07:20,035
في الوسط.
وبالتالي علينا تحويل هذه العقدة إلى

89
00:07:20,394 --> 00:07:23,271
عقدة رباعية npde-4.
الآن, اصبحت L المفتاح الأوسط في هذه العقدة

90
00:07:23,271 --> 00:07:29,240
والآن ماعلينا فعله هو تقسيم العقدة الرباعية node-4 إلى
عقدتين ثنائيتين node-2 ونقل L إلى العقدة الأب

91
00:07:30,140 --> 00:07:36,603
العقدة الرباعية node-4 تمتلك اربع مؤشرات,والعقدتين الثنائيتين لديهما اربعة مؤشرات معا.

92
00:07:36,603 --> 00:07:41,506
لذا ليس هناك شئ في الأسفل بحاجة إلي التغيير.
ثم هذه الاضافة في الأب

93
00:07:41,506 --> 00:07:47,510
غيرتها من عقدتين ثلاثيتين 3-node إلي
عقدة رباعية 4-node مضيفاً طولاً بالأساس بسبب

94
00:07:47,510 --> 00:07:52,666
الانقسام بالعقدتين الثنائيتين 2-nodes حيث أنه كان هناك
عقدة ثلاثية 3-node واحدة فقط من قبل

95
00:07:52,666 --> 00:07:56,726
و لكن الآن , هذه ليست شجرة tree 2-3 , لذا علينا
أن نقوم بالتقسيم مرة أخري.

96
00:07:56,726 --> 00:08:02,269
و في هذه الحالة لا يوجد أب , لذا قمنا
بإنشاء واحد جديد و ارتفاع

97
00:08:02,269 --> 00:08:06,717
الشجرة زاد بواحد.
هذا هو الوقت الوحيد الذي تغير فيه ارتفاع الشجرة tree 2-3 ,

98
00:08:06,717 --> 00:08:12,418
عندما تنقسم الجذور
الارتفاع المقدم زاد بواحد.

99
00:08:12,420 --> 00:08:18,477
لذلك , هذا مثال علي عمليات الاضافة في
العقدة الثلاثية 3-node في القاع , في الشجرة tree 2-3 التي

100
00:08:18,477 --> 00:08:24,336
تَنفُذ علي طول الطريق إلي الأعلي.
و الآن هيا بنا نري إنشاء شجرة tree 2-3

101
00:08:24,336 --> 00:08:29,569
من شجرة فارغة بداية.
لذا إذا بدأنا فقط بإضافة مفتاح ,

102
00:08:29,569 --> 00:08:35,170
بئر , هذا يقوم فقط بإنشاء عقدة ثنائية 2-node
تحتوي هذا المفتاح , و هذه الشجرة tree 2-3 شرعية ,

103
00:08:35,170 --> 00:08:39,076
لذا نحن بخير.
و الآن , إضافة E في هذا البئر ,

104
00:08:39,076 --> 00:08:46,003
ستذهب إلي B إذا كانت في الشجرة أيسر S ,
هذا خط معدوم.لذا نحتاج إلي تحويل 

105
00:08:46,003 --> 00:08:50,693
هذه العقدة الثنائية 2-node إلي عقدة ثلاثية 3-node.
مضبوط؟ و هذا هو الشكل الشرعي للشجرة tree 2-3

106
00:08:50,693 --> 00:08:56,239
لذا أوقفنا إضافة A في هذا.
حولنا هذه العقدة الثلاثية 3-node إلي عقدة رباعية مؤقتة ,

107
00:08:56,586 --> 00:09:01,993
ولكن بعد ذلك نحتاج إلي تقسيم هذه
العقدة الرباعية 4-node بتحريك E إلي الأب و هذا

108
00:09:01,993 --> 00:09:07,817
ينشئ عقدة جذرية جديدة و يزيد
حجم الشجرة بواحد , و لكن الآن هذه

109
00:09:07,817 --> 00:09:12,960
الشجرة tree 2-3 شرية لذا توقفنا.
أضف R في هذا , ستذهب إلي يمين

110
00:09:12,960 --> 00:09:15,215
E. حول إلي عقدة ثلاثية 3-node

111
00:09:15,215 --> 00:09:21,562
و الآن أضف C إلي هذا.ستذهب إلي
أيسر E , تحتاج إلي الربط مع A في

112
00:09:21,562 --> 00:09:25,571
عقدة ثلاثية جديدة.
مرة أخري , هذه شجرة tree 2-3 شرعية و نتوقف.

113
00:09:25,571 --> 00:09:28,327
الآن نضيف H , هذا النوع سيذهب إلي

114
00:09:28,327 --> 00:09:33,254
يمين E.
هذه العقدة الثلاثية 3-node تحولت إلي عقدة رباعية 4-node.

115
00:09:33,254 --> 00:09:38,600
هذه عقدة رباعية 4-node مؤقتة و سنقوم بالتقسيم و
سننقل R إلي الأب ,

116
00:09:39,384 --> 00:09:44,363
و الآن هذا الأب شرعي و لا يمكن
فعل أكثر من هذا

117
00:09:44,363 --> 00:09:48,514
لدينا ثلاث شجرات شرعيين ,
2-3 tree. أضف X ,

118
00:09:48,788 --> 00:09:52,173
إنها أكبر من R , 
تذهب إلي اليمين.

119
00:09:52,447 --> 00:09:58,120
هناك عقدة ثنائية 2-node , هناك حيز لX .
أضف P ,

120
00:09:58,340 --> 00:10:02,381
التي ستكون بين الE و الR.
العقدة الثنائية 2-node تحتوي H ,

121
00:10:02,601 --> 00:10:07,377
الوصلة اليمني غير موجودة ,
لذا حولنا هذه العقدة الثنائية 2-node إلي عقدة ثلاثية 3-node

122
00:10:07,377 --> 00:10:12,741
و الآن لدينا شجرة 2-3 tree شرعية
الآن يمكنك رؤية هذه الإضافة التالية

123
00:10:12,741 --> 00:10:16,047
ستسبب بعض التقسيم أيا كان
مكانه.

124
00:10:16,268 --> 00:10:19,060
لذا أضف L ,
و التي تكون بين E و R.

125
00:10:19,060 --> 00:10:25,231
لذا ستمضي في العقدة الثلاثية 3-node المحتواه علي H و
P و سنحول هذا إلي عقدة رباعية

126
00:10:25,599 --> 00:10:29,420
4-node مؤقتة.
اقسم هذه العقدة الرباعية 4-node , محركاً L إلي الأب.

127
00:10:29,420 --> 00:10:33,348
الآن هؤلاء الأباء للعقدة الرباعية 4-node و التي تحتاج إلي
التقسيم ,

128
00:10:33,567 --> 00:10:38,951
و ننشئ عقدة جذرية جديدة.
و سينمو ارتفاع الشجرة

129
00:10:38,951 --> 00:10:42,079
بواحد.
و هذه شجرة 2-3 tree شرعية , لذا نتوقف.

130
00:10:42,079 --> 00:10:47,536
لذا , هذه التحويلات المحلية ,
تحويل العقدة الثنائية 2-node إلي عقدة ثلاثية 3-node أو

131
00:10:47,536 --> 00:10:52,629
تحويل ثلاثية إلي رباعية , و من ثم
تقسيم و تمرير عقدة إلي الأعلي.

132
00:10:52,629 --> 00:10:58,813
هذه هي فقط العمليات التي نحتاج إلي
الاهتمام بها لنحصل علي التوازن في شجر البحث.

133
00:10:58,813 --> 00:10:59,900
حسناً.

134
00:10:59,900 --> 00:11:06,326
لذا كما قلت لكم و كما يظهر هذا
الشكل , تقسيم العقدة الرباعية 4-node و شجرة 2-3 tree

135
00:11:06,326 --> 00:11:11,857
عبارة عن تحويل محلي.
هي فقط تشمل تغيير عدد ثابت

136
00:11:11,857 --> 00:11:16,169
من الوصلات.
لذا , في هذا المثال , إنه يظهر الموقف العام

137
00:11:16,169 --> 00:11:21,212
عندما تحتاج العقدة الرباعية 4-node إلي التقسيم تكون
منتصف الطول ,

138
00:11:21,212 --> 00:11:24,872
لكن بالمثل صحيح إذا كانت يساراً أو
يميناً

139
00:11:24,872 --> 00:11:28,394
و هؤلاء الست أشجار الفرعية المرسومين يمكن أن يكونوا أضخم.

140
00:11:28,394 --> 00:11:33,904
يمكن أن يحتووا علي ملايين المفاتيح ,
لكن لا يهم علي ماذا يحتوون.

141
00:11:33,904 --> 00:11:38,833
نحن لا نلمسهم أبداً , 
ولا نلمس أي شئ آخر فوق هذه العقدة

142
00:11:38,833 --> 00:11:44,415
في الشجرة حتي يحدث التقسيم.
لذا التحويل الذي قسم هذه العقد b,c,d

143
00:11:44,415 --> 00:11:50,096
و أضاف الC في 
العقدة الثلاثية 3-node في الجذر , يشمل فقط ,عمل

144
00:11:50,096 --> 00:11:56,795
هذه العقدة الثلاثية 3-node إلي عقدة رباعية 4-node مؤقتة.
و عمل هذه العقدة الرباعية 4-node إلي عقدتين ثنائيتين 2- node

145
00:11:56,795 --> 00:12:02,758
و ضبط الأطوال بشكل صحيح.
فقط عدد ثابت من العمليات و

146
00:12:02,758 --> 00:12:09,813
لهذا , هذه العملية , في العموم ,
فعالة.لذلك هيا ننظر إلي

147
00:12:10,164 --> 00:12:17,640
الخصائص العالمية 
التي تستحقها هذه المعالجات.

148
00:12:17,872 --> 00:12:24,707
الشيئين الحرجين هما
أن دائماً في الشجرة 2-3 tree عندنا

149
00:12:24,707 --> 00:12:28,839
ترتيب متماثل.
هذه هي الكلمة التي عرفناها , 

150
00:12:29,085 --> 00:12:32,652
لعقد ثنائية 2-nodes و عقد ثلاثية 3-nodes , و لدينا أيضاً
التوازن المثالي.

151
00:12:32,652 --> 00:12:36,341
المسافة ما بين الجذر و القاع
دائماً متماثلة.

152
00:12:36,341 --> 00:12:40,891
و لاثبات هذا , علينا فقط إظهار
أن كل تحويل يصلح

153
00:12:40,891 --> 00:12:45,994
الترتيب المتماثل و التوازن المثالي , و
هذه هي التحويلات المتاحة

154
00:12:45,994 --> 00:12:49,868
التي يمكن أن نقوم بها.
إذا قسمنا الجذر , إذاً ,

155
00:12:49,868 --> 00:12:54,849
ماذا حدث في الجذور , و إذا كان هناك 
توازن مثالي من قبل , سيكون هناك

156
00:12:54,849 --> 00:12:59,611
توازن مثالي بعد ذلك , مع الطول أكبر بواحد.
إذا كان الأب عقدة ثنائية 2-node لذا

157
00:12:59,611 --> 00:13:04,717
سيكون التحويل تحويلاً محلياً
و إذا نظرت إلي أين هي الوصلات ,

158
00:13:04,717 --> 00:13:09,886
إذا من السهل أن تري بالاستقراء إذا 
كان هناك توازن مثالي قبل أن يكون هناك

159
00:13:09,886 --> 00:13:13,996
توازن مثالي بعد ذلك ,
لأننا لم نغير أي شئ عن 

160
00:13:13,996 --> 00:13:16,923
التوازن المثالي في هذه الأشجار
الفرعية

161
00:13:16,923 --> 00:13:21,344
و هذا صحيح في كل الحالات.
إذا كانت العذدة الثلاثية 3-node في اليمين و هذه العقدة

162
00:13:21,344 --> 00:13:25,391
أعلي بواحد و هؤلاء العقد الأربعة أقل بواحد
و بعد ذلك تكون مثلها.

163
00:13:25,391 --> 00:13:29,813
إذا كان هناك توازن مثالي من قبل
إذاً هناك توازن مثالي بعد ذلك ,

164
00:13:29,813 --> 00:13:32,907
لأننا لم نغير ارتفاع أي من 
العقد.

165
00:13:32,907 --> 00:13:35,982
قمنا فقط بتحريك الأشياء محلياً بين
العقد.

166
00:13:36,174 --> 00:13:40,658
و هذا حين كان هذا الأب عقدة ثلاثية 3-node ,
ثم كان هناك حالات الشجرة ,

167
00:13:40,658 --> 00:13:44,950
إذا قمن بتقسيم القسمة الأخيرة عند
المنتصف و قسمنا عند اليمين ,

168
00:13:44,950 --> 00:13:49,452
و مرة أخري , تغيير الأربع عقد إلي
عقد ثنائية 2-nodes و إضافة وصلات.

169
00:13:49,637 --> 00:13:54,387
إذا كان هناك توازن مثالي من قبل ,
إذاً هناك توازن مثالي بعد ذلك , لأننا

170
00:13:54,387 --> 00:13:57,780
لم نغير ارتفاعات أي شئ آخر
في الشجرة

171
00:13:58,027 --> 00:14:04,870
لذا عملياتنا تصلح الترتيب المتماثل
و التوازن المثالي في الشجرة 2-3 tree.

172
00:14:05,092 --> 00:14:10,592
لذا , هذا سيعطينا , طريقة سهلة جداً
لشرح الأداء.

173
00:14:10,815 --> 00:14:17,280
النداء , أو العمليات كلفت هذا 
التناسب مع المسار الواصل من

174
00:14:17,503 --> 00:14:23,003
الارتفاع إلي القاع , و كل مسار واصل من
الجذر إلي العدم لديه نفس

175
00:14:23,003 --> 00:14:25,827
الطول.
ما هو الطول الممكن لهذه المسارات؟

176
00:14:25,827 --> 00:14:31,846
حسناً , إنه ليس صعباً كي نري أنه 
,في أسوأ حالة , إذا كان كلهم عقد ثنائية 2-nodes ,

177
00:14:31,846 --> 00:14:35,860
هذا هو الأطول الذي يمكن أن يكون في القاعدة الثانية اللوغاريتمية
 للN

178
00:14:35,860 --> 00:14:41,748
الآن , و إذا كانوا كلهم عقد ثلاثية 3-nodes , ستكون
القاعدة الثانية اللوغاريتمية للN , و التي هي أقل ,

179
00:14:41,748 --> 00:14:47,567
هي عبارة تقريباً عن 0.63log القاعدة الثانية اللوغاريتمية للN.
لذا,كل المسارات في الشجرة 2-3 tree بN

180
00:14:47,567 --> 00:14:53,035
عقد يجب أن يكون لها طول بين هذين
الحدين و هما أرقام صغيرة جداً

181
00:14:53,035 --> 00:14:56,813
لملايين العقد , و هو بين اثنا عشر و عشرين.

182
00:14:56,813 --> 00:15:00,396
و إذا كانت بلايين العقد , و هو

183
00:15:00,396 --> 00:15:04,952
بين الثماني عشر و الثلاثين 30.
و هؤلاء واضح أنهم أرقام صغيرة , لذا

184
00:15:04,952 --> 00:15:09,649
سنحصل علي أداء مضمون ,
حتي لقواعد البيانات الضخمة ,

185
00:15:10,029 --> 00:15:14,561
و سنكون قادرين علي ضمان هذا
و يمكن أن نحصل علي بحث و نضيفهم

186
00:15:14,561 --> 00:15:17,960
بما بين ثماني عشر و ثلاثين 30 عملية و هذا
رائع جداً , حقيقةً.

187
00:15:18,220 --> 00:15:24,686
لذا , هذا هو الشكل الذي سيكون عليه جدولنا ,
عندما ننتهي من ـنفيذ الشجر 2-3 trees.

188
00:15:24,686 --> 00:15:27,956
كل عملية مضمونة لكي تكون

189
00:15:27,956 --> 00:15:31,524
مدتها ثابتة log n.
الآن يعتمد الثابت علي

190
00:15:31,895 --> 00:15:37,693
التنفيذ , بالضبط أي نوع
من المعالجات نحتاج إلي فعله لكي نقوم بتحويل ,

191
00:15:38,362 --> 00:15:44,327
العقد الثلاثية 3-nodes إلي عقد رباعية 4-nodes و هلم جرا.
و لكن , سهل من العرض و من 

192
00:15:44,327 --> 00:15:48,869
الأشكال رؤية أن هؤلاء سيكونون 
ثوابت , أداء لوغاريتمي مضمون

193
00:15:48,869 --> 00:15:54,483
لكل العمليات , 
و الذي بالتأكيد نريده في تنفيذ جدول رموز

194
00:15:54,483 --> 00:15:57,394
الآن ماذا عن 
التنفيذ؟

195
00:15:57,394 --> 00:16:02,076
حسناً , نحن لن نتحدث فعلياً 
عند تنفيذ مباشر للشجر 2-3 trees ,

196
00:16:02,076 --> 00:16:07,354
لأن هذا نوع من التعقيد.
إنه من الصعب إصلاح النوع متعدد العقد.

197
00:16:07,354 --> 00:16:10,580
ربما تحتاج , مقارنات عدة لتنتقل

198
00:16:10,580 --> 00:16:14,814
إلي أسفل الشجرة.
إذا كان هناك عقدتين ثلاثيتين 3-node ستأخذ مقارنات أكثر

199
00:16:14,814 --> 00:16:18,578
من العقدة الثنائية 2-node ,
لذا إن تحليلها معقد.

200
00:16:18,780 --> 00:16:23,821
علينا أن نأخذ مسار ,
و نتتبع الوصلات مع الصعود و النزول علي الشجرة لكي 

201
00:16:23,821 --> 00:16:28,189
نأخذ , نعالج التقسيم.
و هناك كثير من الحالات.

202
00:16:28,391 --> 00:16:34,070
لقد رسمت كل الحالات و هناك
أيا كان التقسيم في منتصف

203
00:16:34,070 --> 00:16:37,881
العقدة الرباعية 4-node أو علي يمين العقدة الثنائية 2-node ,
هناك فقط حالات كثيرة. 

204
00:16:37,881 --> 00:16:42,690
لذا , يمكنك فعلها و لكننا لن نفعل 
لأن هناك طريقة أسهل بكثير.

205
00:16:42,690 --> 00:16:48,370
هذه هي الشجر 2-3 trees , 
نموذج لتنفيذ الشجر المتزن

206
00:16:48,370 --> 00:16:50,960
في وقت لوغاريتمي مضمون.