1
00:00:01,078 --> 00:00:08,004
Vediamo ora la nostra prima implementazione 
di un algoritmo per risolvere il problema

2
00:00:08,004 --> 00:00:14,012
della connessione dinamica, chiamato Quick-find. 
Questo algoritmo si definisce avido

3
00:00:14,012 --> 00:00:20,013
e risolve un problema in modo semplice. 
La struttura dati che useremo per

4
00:00:20,013 --> 00:00:25,082
implementare l'algoritmo è semplicemente un array 
di oggetti con indice intero.

5
00:00:25,082 --> 00:00:31,099
La valutazione è che i due oggetti P e Q
sono connessi se e solo se

6
00:00:31,099 --> 00:00:39,005
le loro posizioni nell'array  sono le stesse. Così
in questo esempio con i nostri dieci oggetti

7
00:00:39,005 --> 00:00:46,099
l'array ideale che descrive
la situazione dopo sette connessioni è

8
00:00:46,099 --> 00:00:53,349
è illustrato a metà della diapositiva. 
A questo punto, zero, cinque,

9
00:00:53,349 --> 00:00:59,578
e sei sono tutti nello stesso componente
connesso, perché hanno tutti lo stesso

10
00:00:59,578 --> 00:01:05,171
valore dell'array, zero. Uno due e sette hanno
tutti valore uno. E tre, quattro, otto

11
00:01:05,171 --> 00:01:10,664
e nove hanno tutti valore otto. Così
questa rappresentazione mostra che sono

12
00:01:10,664 --> 00:01:16,636
connessi. Naturalmente questo fornisce 
una implementazione veloce dell'operazione

13
00:01:16,636 --> 00:01:22,439
di ricerca. Noi controlliamo solamente i valori
per vedere se sono uguali. Controllare se P e Q 

14
00:01:22,439 --> 00:01:27,904
hanno lo stesso ID. Così sei e uno hanno
differenti ID. Uno ha ID nove, sei ha ID

15
00:01:27,904 --> 00:01:34,171
zero. Non sono nel medesimo componente
connesso. L'unione per poter fondere due

16
00:01:34,171 --> 00:01:40,981
 componenti che contengono due oggetti dati
è più complicata Dobbiamo cambiare tutti

17
00:01:40,981 --> 00:01:47,755
i valori, in modo che abbiano ID uguale a uno 
di quelli dell'altro array. Arbitrariamente

18
00:01:47,755 --> 00:01:53,634
scegliamo di cambiare quelli che sono
come P in quelli che sono come Q.

19
00:01:53,634 --> 00:01:58,898
Così se consideriamo di unire sei e uno,
dobbiamo cambiare gli ingressi zero, cinque

20
00:01:58,898 --> 00:02:04,741
e sei. Ogni elemento nella stessa componente
connessa ha lo stesso valore di sei. Da zero ad uno.

21
00:02:04,741 --> 00:02:10,917
Questo come vedremo, rappresenta un
problema quando si ha un ampio numero

22
00:02:10,917 --> 00:02:16,927
di oggetti, perché ci sono molti valori
che possono cambiare. Però è facile

23
00:02:16,927 --> 00:02:23,263
da implementare, così iniziamo da qui.
Iniziamo con la dimostrazione

24
00:02:23,263 --> 00:02:31,189
di come funziona. Inizialmente impostiamo
l'ID dell'array, ogni ingresso uguale

25
00:02:31,189 --> 00:02:37,932
al proprio indice. Questo ci dice che tutti 
gli oggetti sono indipendenti. Sono

26
00:02:37,932 --> 00:02:43,918
connessi con se stessi. Adesso 
facciamo una operazione d'unione. Poniamo

27
00:02:43,918 --> 00:02:49,694
che quattro sia collegato a tre.Di conseguenza 
dobbiamo cambiare tutti gli ingressi

28
00:02:49,694 --> 00:02:56,190
che abbiano ID uguale al primo ID con il secondo ID.
Così in questo caso, cambieremo

29
00:02:56,190 --> 00:03:02,061
il tre e il quattro che sono connessi, significa
che dobbiamo cambiare il quattro in tre.

30
00:03:02,061 --> 00:03:10,259
Ne faremo ancora qualcuno, così vi farete
un'idea di come funzioni. Occupiamoci di

31
00:03:10,259 --> 00:03:13,657
tre e otto. Così sono connessi, ed
ora devono essere connessi ad otto.

32
00:03:13,657 --> 00:03:19,950
Così entrambe questi valori devono
cambiare in otto. Okay? Ora cosa diciamo

33
00:03:19,950 --> 00:03:26,026
di sei e cinque? Di nuovo cambiamo
il primo per fare il paio con il secondo.

34
00:03:26,026 --> 00:03:32,332
Così per connettere sei e cinque cambiamo il sei
con un cinque. Cosa dire di nove e quattro?

35
00:03:32,332 --> 00:03:39,789
Ora dobbiamo cambiare la connessione di nove
e quattro, quindi il valore di nove

36
00:03:39,789 --> 00:03:45,325
perché diventi lo stesso di quattro. Ora abbiamo tre
quattro, otto e nove. Tutti hanno valore

37
00:03:45,325 --> 00:03:52,365
otto. Sono tutti nello stesso elemento connesso.
Due ed uno significano che

38
00:03:52,365 --> 00:04:00,013
possiamo connettere due ed uno cambiando il due in uno.
Otto e nove sono già connessi

39
00:04:00,013 --> 00:04:06,660
hanno lo stesso ingresso nell'array. Così se
ci chiediamo se siano connessi, la ricerca dice sì

40
00:04:06,660 --> 00:04:13,096
sono già connessi. Cinque e zero
hanno ingressi differenti.

41
00:04:13,096 --> 00:04:21,780
Non sono connessi e la ricerca torna il valore falso
cioè, non connesso. Allora se vogliamo connettere

42
00:04:21,780 --> 00:04:31,617
cinque e zero, come al solito, dobbiamo
connettere gli ingressi

43
00:04:31,617 --> 00:04:39,855
in modo che corrispondano per entrambe, cinque
e sei a zero. Vediamo sette e due e uniamoli.

44
00:04:39,865 --> 00:04:49,623
Questo è facile. Uniamo sei ed uno,
così ci saranno tre ingressi da

45
00:04:49,623 --> 00:04:57,899
cambiare. Tutti questi zero devono essere
cambiati in uno. Questa è una veloce dimostrazione

46
00:04:57,899 --> 00:05:04,126
di Quick-find. Ora diamo un'occhiata al codice
per implementarlo. Bene,

47
00:05:04,126 --> 00:05:10,628
con questo caso concreto in mente ci muoviamo
verso il codice di questo algoritmo che è piuttosto

48
00:05:10,628 --> 00:05:16,518
diretto. Sebbene sia un esercizio
di programmazione interessante

49
00:05:16,518 --> 00:05:23,312
molti di voi lo sbaglieranno la prima volta.
Iniziamo con il costruttore

50
00:05:23,312 --> 00:05:29,125
Abbiamo un array d'interi privato. Che
sarebbe il nostro array di ID. Questa è la struttura dati

51
00:05:29,125 --> 00:05:33,953
che mantiene questa implementazione.
Il costruttore deve creare

52
00:05:33,953 --> 00:05:40,637
l'array, attraversarlo e inizializzare i valori
uguali all'indice corrispondente

53
00:05:40,637 --> 00:05:47,200
uno ad uno. Questo è immediato. L'operazione
di ricerca, o di connessione, è

54
00:05:47,200 --> 00:05:53,024
quella facile. Questo è l'algoritmo
Quick-find. Semplicemente prende due

55
00:05:53,024 --> 00:05:58,552
argomenti, P e Q, e controlla se i
loro valori di ID sono uguali, e restituisce

56
00:05:58,552 --> 00:06:04,077
quel valore. Se sono uguali restituisce vero.
Se non sono uguali restituisce

57
00:06:04,077 --> 00:06:09,942
falso. L'operazione più complicata
da implementare è l'unione. Così prima

58
00:06:09,942 --> 00:06:15,803
troviamo l'ID corrispondente con il primo argomento,
e poi l'ID corrispondente al

59
00:06:15,803 --> 00:06:21,018
secondo argomento. Poi percorriamo
tutto l'array per cercare

60
00:06:21,018 --> 00:06:27,068
gli elementi con ID uguale all'ID del
primo elemento, e li impostiamo

61
00:06:27,068 --> 00:06:32,565
con il valore dell'ID del secondo elemento.
Questa è una realizzazione piuttosto diretta.

62
00:06:32,565 --> 00:06:38,156
Ho detto che molti di voi avrebbero fatto errori.
L'errore che possiamo fare è mettere

63
00:06:38,156 --> 00:06:43,660
l'ID di P qui prima di selezionarlo.
Potete immaginare

64
00:06:43,660 --> 00:06:48,672
con quali implicazioni. E' un errore
insidioso. Questa è una buona

65
00:06:48,672 --> 00:06:54,900
implementazione di Quick-find, così
la prossima cosa da decidere è quanto efficace

66
00:06:54,900 --> 00:07:01,152
o efficiente sia questo algoritmo. 
Vedremo prossimamente alcuni dettagli di come

67
00:07:01,152 --> 00:07:07,088
farlo, per ora sarà sufficiente pensare
al numero di volte che

68
00:07:07,088 --> 00:07:12,901
codice deve accedere all'array. Come
abbiamo visto mentre lo realizzavamo entrambe

69
00:07:12,901 --> 00:07:19,019
le operazioni di inizializzazione ed unione utilizzazano
il ciclo for che scandisce tutto

70
00:07:19,019 --> 00:07:25,469
l'array. Così devono raggiungere una costante
proporzionale a n volte dopo aver visitato

71
00:07:25,469 --> 00:07:32,155
l'ingresso dell'array. L'operazione find è veloce
controlla solo un numero di volte costante 

72
00:07:32,155 --> 00:07:37,829
gli ingressi dell'array. Questo è un problema
perché l'operazione di unione è troppo

73
00:07:37,829 --> 00:07:45,708
costosa, in particolare, se si hanno
N comandi di unione su N oggetti, che non è

74
00:07:45,708 --> 00:07:52,515
irragionevole. Che siano connessi o no
ci vorrà sempre un tempo elevato al quadrato

75
00:07:52,515 --> 00:07:58,458
E uno dei temi che affronteremo
più e più volte

76
00:07:58,458 --> 00:08:04,531
in questo corso è che un tempo al quadrato
è troppo lento. Non possiamo accettare un tempo al qudrato

77
00:08:04,531 --> 00:08:10,796
per algoritmi per risolvere problemi di grandi dimensioni.
Il problema è che il tempo non diminuisce.

78
00:08:10,796 --> 00:08:16,305
Anche se i computer diventano più veloci e più capaci,
gli algoritmi quadratici in realtà diventano più lenti.

79
00:08:16,305 --> 00:08:22,464
Parliamo un po di cosa intendo.
In modo grossolano diciamo, per ora

80
00:08:22,464 --> 00:08:29,206
che le persone hanno computer che possono
eseguire miliardi di operazioni al secondo

81
00:08:29,206 --> 00:08:34,815
e mantengono miliardi di dati nella
memoria principale.Questo significa

82
00:08:34,815 --> 00:08:40,916
Significa che potresti accedere ad ogni dato
della memoria principale in circa un secondo. E' un

83
00:08:40,916 --> 00:08:46,907
fatto piacevole che questo standard grossolano
abbia tenuto per 50 o 60 anni. I computer

84
00:08:46,907 --> 00:08:52,735
diventano più grandi ma diventano più veloci, così per
accedere ad ogni dato nella memoria ci vorranno

85
00:08:52,735 --> 00:08:57,403
pochi secondi. E' vero quando i computer
hanno poche migliaia di parole

86
00:08:57,403 --> 00:09:04,657
ed è vero quando, come ora, ne hanno
miliardi e più. Diciamo che questa è una rappresentazione

87
00:09:04,657 --> 00:09:11,873
di come appare un computer. Significa che
con una memoria così grande, noi possiamo

88
00:09:11,873 --> 00:09:17,712
indirizzare problemi altrettanto grandi. Così potremmo
avere miliardi di oggetti, e sperare di fare

89
00:09:17,712 --> 00:09:23,608
su di essi, miliardi di operazioni di unione.
Ma il vero problema con l'algoritmo di ricerca veloce

90
00:09:23,608 --> 00:09:29,770
è che ci vorrebbero 10^18 operazioni, o accessi all'array

91
00:09:29,770 --> 00:09:35,098
o accessi di memoria. Se fate il calcolo matematico,
il tempo impiegato sarebbe di circa 30 anni

92
00:09:35,098 --> 00:09:42,033
di tempo macchina. Ovviamente non è pratico
affrontare un tale problema con i computer attuali.

93
00:09:42,033 --> 00:09:48,057
Il problema reale è che gli algoritmi quadratici
non migliorano le prestazioni con la tecnologia.

94
00:09:48,057 --> 00:09:54,097
Potreste avere un nuovo computer, diciamo dieci volte più veloce

95
00:09:54,097 --> 00:10:00,033
e affrontare un problema che sia dieci volte
più grande. Ma con l'algoritmo

96
00:10:00,033 --> 00:10:06,028
quadratico, vedrete che sarà dieci volte più lento.
Questo è il tipo

97
00:10:06,028 --> 00:10:11,048
di situazione che cercheremo di evitare
per sviluppare algoritmi più efficienti

98
00:10:11,048 --> 00:10:13,020
per risolvere problemi come questo.