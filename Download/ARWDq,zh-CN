1
00:00:03,230 --> 00:00:04,080
欢迎回来

2
00:00:04,080 --> 00:00:07,380
今天我们讨论归并排序

3
00:00:07,380 --> 00:00:09,880
这是计算基础设施中的

4
00:00:09,880 --> 00:00:12,340
两个重要排序算法之一

5
00:00:13,824 --> 00:00:16,398
我们已经对这些算法

6
00:00:16,398 --> 00:00:19,896
有了科学全面的认知

7
00:00:19,896 --> 00:00:23,130
并已被大量运用在系统排序和应用内排序

8
00:00:23,130 --> 00:00:26,560
超过50多年

9
00:00:26,560 --> 00:00:28,550
事实上，我们之后所要看到的快速排序

10
00:00:28,550 --> 00:00:30,470
更是被在科学和工程中被誉为

11
00:00:30,470 --> 00:00:33,990
20世纪10大算法之一

12
00:00:35,190 --> 00:00:38,540
这节课中我们讲解的是归并排序

13
00:00:38,540 --> 00:00:43,629
它被用于大量编程系统 包括Java

14
00:00:44,730 --> 00:00:46,750
下次看到的快速排序

15
00:00:46,750 --> 00:00:49,520
也在Java中有着不同的应用

16
00:00:52,720 --> 00:00:56,320
所以归并排序到底是什么样的?

17
00:00:57,870 --> 00:00:59,530
它的思想其实很简单，其实思想很简单

18
00:00:59,530 --> 00:01:02,820
只要把数组一分为二

19
00:01:02,820 --> 00:01:06,200
然后再不断将小数组递归地一分为二下去

20
00:01:06,200 --> 00:01:07,840
经过一些排序再将它们合并起来

21
00:01:07,840 --> 00:01:09,720
这就是归并排序的大致思想

22
00:01:11,480 --> 00:01:14,240
这是人们在计算机上实现的

23
00:01:14,240 --> 00:01:17,270
最早的算法之一

24
00:01:18,300 --> 00:01:22,450
EDVAC计算机是最早的通用型计算机之一

25
00:01:22,450 --> 00:01:25,300
冯诺依曼认为在他的EDVAC中

26
00:01:25,300 --> 00:01:28,080
需要一种排序算法

27
00:01:28,080 --> 00:01:31,230
于是他提出了归并排序

28
00:01:31,230 --> 00:01:33,951
因此他被公认为归并排序之父

29
00:01:36,230 --> 00:01:40,220
归并排序的核心就是“并”

30
00:01:41,328 --> 00:01:44,982
所以要理解如何归并

31
00:01:44,982 --> 00:01:48,730
先考虑一种抽象的“原位归并”

32
00:01:49,810 --> 00:01:54,470
假如有个数组它的前一半和后一半已是排好序的

33
00:01:54,470 --> 00:02:01,420
我们所要做的就是将这两个子数列

34
00:02:01,420 --> 00:02:04,880
合并成一个大的排好序的数列

35
00:02:04,880 --> 00:02:05,855
看一个演示

36
00:02:05,855 --> 00:02:11,290
[咳嗽]

37
00:02:11,290 --> 00:02:13,200
在排序之前我们需要一个辅助数组

38
00:02:13,200 --> 00:02:17,880
用于记录数据

39
00:02:17,880 --> 00:02:21,100
这是实现归并的最简单的方式

40
00:02:21,100 --> 00:02:24,890
首先将原数组中所有东西拷贝进辅助数组

41
00:02:27,080 --> 00:02:31,580
之后我们就要以排好的顺序

42
00:02:31,580 --> 00:02:36,160
将它们拷贝回原数组

43
00:02:36,160 --> 00:02:39,930
这时我们需要三个下标

44
00:02:39,930 --> 00:02:46,320
i用于指向左边子数组，j指向右边子数组

45
00:02:46,320 --> 00:02:52,100
k指向原数组即排好序的数列。[咳嗽声]

46
00:02:52,100 --> 00:03:00,000
首先取i和j所指数字

47
00:03:00,000 --> 00:03:06,210
取其中小的放入原数组中

48
00:03:06,210 --> 00:03:09,170
当一个被拿走之后，原本的指针递增

49
00:03:10,330 --> 00:03:13,450
同样取小的那个j

50
00:03:13,450 --> 00:03:17,030
移向k的位置

51
00:03:17,030 --> 00:03:19,810
再同时增加j和k

52
00:03:20,850 --> 00:03:25,050
这有两个相同的，我们就取前者

53
00:03:25,050 --> 00:03:29,570
所以前一个数就去了k的位置

54
00:03:29,570 --> 00:03:31,200
再增加i和k

55
00:03:32,440 --> 00:03:36,300
这两个E又是一样的

56
00:03:36,300 --> 00:03:40,120
取前一个 指针递增

57
00:03:41,470 --> 00:03:42,034
那么

58
00:03:42,034 --> 00:03:44,020
现在E比G小

59
00:03:44,020 --> 00:03:46,860
那就E去原数组

60
00:03:46,860 --> 00:03:49,510
把它移上去在增加j和k

61
00:03:50,710 --> 00:03:52,770
现在的i所指的G小

62
00:03:52,770 --> 00:03:56,480
把它移上去再递增

63
00:03:56,480 --> 00:04:04,040
再移M上去 指针递增

64
00:04:04,040 --> 00:04:07,310
接着是左边子数组最后一个移上去

65
00:04:07,310 --> 00:04:12,790
前一个子数组已空

66
00:04:12,790 --> 00:04:16,120
只需将剩下的一次移回去即可

67
00:04:17,680 --> 00:04:21,680
之前我们将它们拷贝了出来，当然这些移动可以优化

68
00:04:22,860 --> 00:04:28,860
这就是一种归并方式——

69
00:04:28,860 --> 00:04:32,660
用了一个辅助数组

70
00:04:32,660 --> 00:04:36,450
将它们移出来又排好序放了回去

71
00:04:36,450 --> 00:04:40,650
这就是归并部分的代码，完全依着之前的演示

72
00:04:42,060 --> 00:04:47,290
在这个简单的实现中

73
00:04:47,290 --> 00:04:52,610
传入了Comparable类型的原数组a和辅助数组aux

74
00:04:52,610 --> 00:04:57,840
还有三个参数

75
00:04:57,840 --> 00:04:59,410
lo, mid, and hi.

76
00:04:59,410 --> 00:05:02,840
lo指向的是两个将要合并的子数组的头部

77
00:05:02,840 --> 00:05:06,350
mid指向前一个子数组的末端

78
00:05:06,350 --> 00:05:09,320
所以我们的前提是lo到mid时排好的

79
00:05:09,320 --> 00:05:12,830
从mid+1到hi也是排好的

80
00:05:13,966 --> 00:05:17,278
[咳嗽声]第一件事就是

81
00:05:17,278 --> 00:05:20,600
拷贝所有东西进辅助数组

82
00:05:21,650 --> 00:05:23,220
然后写这个for循环

83
00:05:23,220 --> 00:05:27,470
完成归并

84
00:05:27,470 --> 00:05:30,970
我们初始化i在左半边的最左端

85
00:05:30,970 --> 00:05:33,430
j在右半边最左端

86
00:05:33,430 --> 00:05:34,480
即m+1

87
00:05:34,480 --> 00:05:37,690
让指针k从lo开始

88
00:05:37,690 --> 00:05:43,000
在if语句中我们做的最多的是第三句

89
00:05:43,000 --> 00:05:48,400
比较辅助数组中i和j谁更小

90
00:05:48,400 --> 00:05:48,900
辅助数组i

91
00:05:50,780 --> 00:05:55,730
如果j确实小于i，将j移到原数组，并且j自增

92
00:05:56,780 --> 00:06:00,490
反之移动i，i自增

93
00:06:00,490 --> 00:06:02,690
不管谁小

94
00:06:02,690 --> 00:06:06,910
都要使k递增

95
00:06:06,910 --> 00:06:12,250
如果i走到边界了，就只将j以此移上去

96
00:06:12,250 --> 00:06:13,650
如果j所指的合并完了

97
00:06:13,650 --> 00:06:18,680
将i所指依次移动

98
00:06:18,680 --> 00:06:23,790
每次都向k移动

99
00:06:23,790 --> 00:06:28,812
就实现了在原数组原地合并

100
00:06:28,812 --> 00:06:33,896
我们还用到了Java的assertion功能

101
00:06:33,896 --> 00:06:38,900
方便我们找出漏洞并且确定算法的正确

102
00:06:40,530 --> 00:06:46,410
这一句说的是

103
00:06:46,410 --> 00:06:51,710
我们想确定a[lo]到a[mid]和

104
00:06:51,710 --> 00:06:55,050
a[mid+1]到a[hi]是否已是排好序的

105
00:06:55,050 --> 00:06:58,580
最后再检查最终合并后的时候排好序

106
00:06:59,976 --> 00:07:05,664
一般来说Java程序员

107
00:07:05,664 --> 00:07:08,766
认为加入这些assert是有益的

108
00:07:08,766 --> 00:07:11,112
不仅帮助我们发现漏洞

109
00:07:11,112 --> 00:07:13,880
同时也提示了之间的代码的功能

110
00:07:13,880 --> 00:07:17,190
这个归并代码就是很好的例子

111
00:07:17,190 --> 00:07:20,052
如此以代码的形式加入assert语句

112
00:07:20,052 --> 00:07:24,180
表明了接下来你想做什么

113
00:07:24,180 --> 00:07:25,730
在代码最后加上assert语句

114
00:07:25,730 --> 00:07:28,820
表明了你做了什么

115
00:07:28,820 --> 00:07:31,010
你不仅确定了代码的正确

116
00:07:31,010 --> 00:07:35,150
也告诉阅读代码的人你所干的事情

117
00:07:36,930 --> 00:07:42,990
Java中asset语句接受一个boolean

118
00:07:42,990 --> 00:07:47,830
isSorted函数前面已经写过了

119
00:07:47,830 --> 00:07:52,880
如果排好序返回true，反之返回false

120
00:07:52,880 --> 00:07:56,280
assert在验证到没正确排序时

121
00:07:56,280 --> 00:07:57,850
会抛出异常

122
00:07:58,950 --> 00:08:00,852
assert所做的

123
00:08:00,852 --> 00:08:04,250
你可以在运行时禁用

124
00:08:04,250 --> 00:08:07,850
这很有用因为你可以把asset语句一直放在代码中

125
00:08:07,850 --> 00:08:11,550
编程时供自己所需

126
00:08:11,550 --> 00:08:16,870
禁用后在最终产品程序中不会有额外代码

127
00:08:16,870 --> 00:08:20,310
因此assertion默认是禁用的

128
00:08:20,310 --> 00:08:21,480
出错的时候

129
00:08:22,590 --> 00:08:26,830
人们还可以启用assertion

130
00:08:28,270 --> 00:08:30,960
然后找到错误所在

131
00:08:32,060 --> 00:08:36,980
所以平时最好像之前的例子那样

132
00:08:36,980 --> 00:08:39,870
加入assert语句

133
00:08:39,870 --> 00:08:42,010
并且不让他们出现在产品代码中

134
00:08:42,010 --> 00:08:44,240
而且不要用额外的参数

135
00:08:44,240 --> 00:08:45,825
来做检查

136
00:08:45,825 --> 00:08:50,990
有了归并

137
00:08:50,990 --> 00:08:56,020
排序中递归的就简单多了

138
00:08:57,840 --> 00:09:03,390
这里我们有之前的merge() 还有sort()

139
00:09:03,390 --> 00:09:07,250
在递归调用前先检查下标

140
00:09:07,250 --> 00:09:10,960
然后像二分查找那样计算中点值

141
00:09:10,960 --> 00:09:14,990
sort前半部分

142
00:09:14,990 --> 00:09:17,810
再sort后半部分 然后merge

143
00:09:18,830 --> 00:09:24,080
对外提供接口中sort函数只接收一个参数

144
00:09:24,080 --> 00:09:29,370
创建辅助数组的任务就交给这个sort()

145
00:09:30,390 --> 00:09:36,300
这里关键在于

146
00:09:36,300 --> 00:09:38,840
不要将辅助数组在递归的sort()中创建

147
00:09:38,840 --> 00:09:43,460
因为那会多出许多额外的小数组的花费

148
00:09:43,460 --> 00:09:48,720
如果一个归并排序效率很低通常都是由这引起

149
00:09:48,720 --> 00:09:53,170
这是一个很直接的实现方式

150
00:09:53,170 --> 00:09:56,890
也是依据了

151
00:09:56,890 --> 00:09:58,510
我们看到多次的一个思想

152
00:09:58,510 --> 00:10:00,450
分治法

153
00:10:00,450 --> 00:10:01,460
即解决问题时将其一分为二

154
00:10:01,460 --> 00:10:04,370
分别解决两个小问题

155
00:10:04,370 --> 00:10:07,420
再将它们合并起来

156
00:10:10,675 --> 00:10:15,450
[咳嗽声]这是归并排序的轨迹图

157
00:10:15,450 --> 00:10:22,590
如果你之前还没学过递归算法，
有必要对其有深入的了解

158
00:10:22,590 --> 00:10:28,550
这幅图显示了每次调用merge时的操作

159
00:10:28,550 --> 00:10:31,740
我们将一个大的问题对半分

160
00:10:31,740 --> 00:10:34,660
再将其中的一半对半分

161
00:10:34,660 --> 00:10:35,710
对于那些分到不能再分单个元素

162
00:10:35,710 --> 00:10:38,110
我们做的就是两两间的比较

163
00:10:38,110 --> 00:10:41,150
两个单元素数组的合并实际就是对这两个数进行了排序

164
00:10:41,150 --> 00:10:43,960
同样再对后一组的两个数归并排序

165
00:10:43,960 --> 00:10:48,040
再将两单元数组归并成四单元数组

166
00:10:48,040 --> 00:10:50,300
同样再对后两对归并

167
00:10:50,300 --> 00:10:53,790
这样就得到两个四单元数组

168
00:10:53,790 --> 00:10:56,330
再归并得到八单元组

169
00:10:56,330 --> 00:10:57,840
右边的一半也是同理

170
00:10:57,840 --> 00:11:00,890
最终两个八单元合并

171
00:11:00,890 --> 00:11:03,250
得到最终的结果

172
00:11:03,250 --> 00:11:06,110
观察这个轨迹图

173
00:11:06,110 --> 00:11:09,850
对于学习递归算法是很有帮助的

174
00:11:11,350 --> 00:11:14,080
现在我们看一个动画

175
00:11:14,080 --> 00:11:16,149
这次将更多元素进行排序

176
00:11:17,800 --> 00:11:20,820
你能看到显示前半部分被排序

177
00:11:20,820 --> 00:11:23,040
接着是后半部分

178
00:11:24,160 --> 00:11:26,100
现在后半部分也被排好

179
00:11:26,100 --> 00:11:29,430
最后从头将两部分合并

180
00:11:30,530 --> 00:11:34,490
 动画中看上去有一些动态
(即动画中看似将一部分剪切粘到另一堆上去)

181
00:11:34,490 --> 00:11:37,319
这是因为有辅助数组

182
00:11:38,710 --> 00:11:41,010
再来看看倒序数列的排序情况

183
00:11:43,680 --> 00:11:49,590
先是前一半 接着就是后一半

184
00:11:49,590 --> 00:11:54,100
一旦两部分排完就要合并了

185
00:11:54,100 --> 00:11:58,180
可见对倒序数组排序和之前的随机数组一样快

186
00:11:59,910 --> 00:12:04,210
因此可以将归并排序用在大量数据中

187
00:12:04,210 --> 00:12:09,520
这是个非常高效的算法

188
00:12:09,520 --> 00:12:16,140
如表中所示
如果要对大量数据进行插入排序 

189
00:12:16,140 --> 00:12:18,660
假设有十亿个元素

190
00:12:18,660 --> 00:12:21,770
用家里的电脑要花几个世纪

191
00:12:23,380 --> 00:12:26,300
就算目前的超级计算机

192
00:12:26,300 --> 00:12:30,380
也要花费一个星期或更多

193
00:12:30,380 --> 00:12:32,150
但是拥有一个高效的算法

194
00:12:32,150 --> 00:12:34,540
你对十亿个元素排序

195
00:12:34,540 --> 00:12:39,150
家用电脑也只需半小时

196
00:12:39,150 --> 00:12:42,880
超级计算机更是一瞬间即可完成

197
00:12:42,880 --> 00:12:46,150
一些小型的问题PC也可迅速完成

198
00:12:46,150 --> 00:12:52,890
因此要么你有很多钱和时间
要么你要有一个好的算法

199
00:12:52,890 --> 00:12:56,750
这是我们在这门课中的核心主题

200
00:12:56,750 --> 00:13:00,770
即一个好的算法远比

201
00:13:00,770 --> 00:13:03,990
差的算法所花时间和金钱高效得多

202
00:13:06,750 --> 00:13:11,950
现在看一下归并算法的效率分析

203
00:13:11,950 --> 00:13:21,040
这些数学的东西才能展示出分治法的强大

204
00:13:21,040 --> 00:13:26,900
展示出归并算法如何在nlogn时间中解决了

205
00:13:26,900 --> 00:13:33,200
选择排序和插入排序需要N^2时间才能解决的问题

206
00:13:33,200 --> 00:13:37,000
命题如下 对于大小为N的数组

207
00:13:37,000 --> 00:13:41,050
归并排序需要至多NlogN次比较
和6NlogN次数组访问

208
00:13:42,310 --> 00:13:48,190
证明这个结论就是需要

209
00:13:48,190 --> 00:13:53,900
从之前的代码中得出递推关系式

210
00:13:53,900 --> 00:13:59,140
这便是代码所反映的数学问题

211
00:13:59,140 --> 00:14:04,220
如果对N个元素排序，用关于N的函数C

212
00:14:04,220 --> 00:14:07,610
来表示需要比较的次数

213
00:14:08,620 --> 00:14:14,740
归并时左半部分和右半部分元素个数

214
00:14:14,740 --> 00:14:20,100
就用N/2上取整和N/2下取整来表示

215
00:14:20,100 --> 00:14:25,450
这就是两个子数组的大小了

216
00:14:25,450 --> 00:14:27,410
 因为我们递归地调用函数
所以括号里就是每次递归时分割后子数组的大小

217
00:14:27,410 --> 00:14:29,460
于是整个一项就是子数组中
这些数排序需要的比较次数

218
00:14:29,460 --> 00:14:33,060
对于左半部分比较次数
就是关于N/2上取整的函数C

219
00:14:33,060 --> 00:14:35,737
对于右边同理

220
00:14:35,737 --> 00:14:40,450
二合并时我们需要至多N次比较

221
00:14:41,690 --> 00:14:45,940
因为如果左右没有一边提前排完
就需要N次比较

222
00:14:45,940 --> 00:14:49,300
这也只是N大于等于1的情况

223
00:14:49,300 --> 00:14:50,530
如果只有一个单元

224
00:14:50,530 --> 00:14:55,580
是不需要任何比较的

225
00:14:55,580 --> 00:15:02,830
于是这个从代码中考查得来的公式

226
00:15:02,830 --> 00:15:07,200
就能精确计算所需要的比较次数上界

227
00:15:07,200 --> 00:15:11,170
对于数组访问次数的计算相似

228
00:15:11,170 --> 00:15:15,930
只是在归并的时候后面加上的是6N
(注: 如从a拷贝到aux算两次数组访问)

229
00:15:17,040 --> 00:15:20,800
关于这些求这些复杂公式的通项

230
00:15:20,800 --> 00:15:23,240
在这节课中不会讲

231
00:15:23,240 --> 00:15:25,610
这节课不是离散数学

232
00:15:27,940 --> 00:15:34,820
但我们可以看一下当N为2的幂次时的情况

233
00:15:34,820 --> 00:15:36,530
但结论是对N为任意数都成立的

234
00:15:36,530 --> 00:15:39,090
我们可以通过数学归纳法来证明

235
00:15:40,280 --> 00:15:45,040
所以我们讨论这个

236
00:15:45,040 --> 00:15:47,540
和前面相似的递推关系式

237
00:15:47,540 --> 00:15:52,840
当N是2的幂次时的情况

238
00:15:52,840 --> 00:15:53,010
如果当且仅当

239
00:15:53,010 --> 00:16:00,520
并且当N=1时D(1)=0，就有通项D(N)=NlogN

240
00:16:00,520 --> 00:16:04,800
我将展示三种证明方法 都假设N为2的幂次

241
00:16:04,800 --> 00:16:07,140
如果N是2的幂次，那除以二也是2的幂次

242
00:16:07,140 --> 00:16:10,350
这是显然的

243
00:16:11,510 --> 00:16:15,310
第一种是图示法

244
00:16:15,310 --> 00:16:18,140
如果要算D(N)

245
00:16:18,140 --> 00:16:24,470
就等于两倍的D(N/2)还要加上

246
00:16:24,470 --> 00:16:30,285
每两个子数组归并时
需要的两倍于子数组大小的比较次数

247
00:16:30,285 --> 00:16:34,590
这时对这两个大小为N/2的数组

248
00:16:34,590 --> 00:16:38,110
继续分为大小为N/4

249
00:16:38,110 --> 00:16:43,130
这样四个大小N/4的归并需要2*2*(N/4)=N次比较

250
00:16:43,130 --> 00:16:48,980
同样之前是2*(N/2)=N

251
00:16:48,980 --> 00:16:54,660
直到我们分到了大小为2的子数组
对于一整层的比较次数还是N

252
00:16:54,660 --> 00:16:56,940
所以共有多少层?

253
00:16:56,940 --> 00:17:00,740
将N不断除2一直到等于2

254
00:17:00,740 --> 00:17:04,630
也就得到logN层 以2为底

255
00:17:04,630 --> 00:17:08,220
归并的全部开销就在于比较次数

256
00:17:08,220 --> 00:17:12,950
也就是NlogN

257
00:17:12,950 --> 00:17:17,550
这就是用图示法来计算递推式

258
00:17:18,600 --> 00:17:24,110
还有一种偏向数学的方法

259
00:17:24,110 --> 00:17:28,880
左右同除N

260
00:17:32,090 --> 00:17:38,640
就得到这样一个式子

261
00:17:38,640 --> 00:17:40,480
所以这种方法就是先同除N再迭代

262
00:17:40,480 --> 00:17:43,670
即这时的递推式能够不断通过代换进行下去

263
00:17:43,670 --> 00:17:47,780
因为等号右边第一项和左边形式是一样的

264
00:17:47,780 --> 00:17:51,710
所以直接将第一行的式子代入D(N/2)/(N/2)中

265
00:17:51,710 --> 00:17:55,140
后面都是这样除以2多加个1

266
00:17:55,140 --> 00:17:57,570
直到

267
00:17:57,570 --> 00:18:00,450
得到D(1)，就可以带入零

268
00:18:00,450 --> 00:18:02,990
这时我们加了logN个1

269
00:18:02,990 --> 00:18:09,510
左右乘N得到logN

270
00:18:09,510 --> 00:18:11,560
这就是第二种证法

271
00:18:14,180 --> 00:18:20,560
或者可以写个程序计算这个递推式

272
00:18:20,560 --> 00:18:28,890
同样也能得到接近logN的结果

273
00:18:28,890 --> 00:18:33,130
第三种证法是数学归纳法

274
00:18:33,130 --> 00:18:39,700
即将结论作为条件进行演绎

275
00:18:39,700 --> 00:18:43,100
有归纳假设D(N)=NlgN

276
00:18:43,100 --> 00:18:45,395
我们只需得到D(2N)=2Nlog(2N)

277
00:18:45,395 --> 00:18:52,210
将用2N代替递推式中N 展开消去2N

278
00:18:52,210 --> 00:18:56,290
就能得到结果

279
00:18:56,290 --> 00:19:00,190
对于数组访问次数的递推式的前半部分

280
00:19:00,190 --> 00:19:04,770
我们也是运用同样的方法

281
00:19:04,770 --> 00:19:10,030
得到数组访问次数也是NlogN

282
00:19:10,030 --> 00:19:14,365
因此归并排序的速度才会那么迅速

283
00:19:14,365 --> 00:19:18,370
另外需要知道的是内存占用

284
00:19:18,370 --> 00:19:21,060
归并排序的一大特点就是

285
00:19:21,060 --> 00:19:25,810
它需要随N增大而增大的额外空间

286
00:19:25,810 --> 00:19:29,550
因为有那个额外的辅助数组

287
00:19:30,880 --> 00:19:34,510
我们将两个子数组看似原地排序

288
00:19:34,510 --> 00:19:37,610
但实际上并不是真正的“原地”

289
00:19:37,610 --> 00:19:39,410
因为我们用到了额外的数组

290
00:19:40,948 --> 00:19:44,846
可见真正的“原地”也相当重要

291
00:19:44,846 --> 00:19:47,630
因为很多时候我们想要在内存中

292
00:19:47,630 --> 00:19:50,590
全部塞满我们要排序的东西

293
00:19:51,620 --> 00:19:57,380
这时插入排序 Shellsort就是真正的原地排序
不需要额外空间

294
00:19:57,380 --> 00:20:00,500
但归并排序你只能放一半

295
00:20:00,500 --> 00:20:05,920
另一半要留给辅助数组

296
00:20:05,920 --> 00:20:08,910
如果你觉得现在所学的太简单

297
00:20:08,910 --> 00:20:13,800
而在思考一种真正的原地归并

298
00:20:13,800 --> 00:20:16,530
其实人们已经有一些方法来完成

299
00:20:16,530 --> 00:20:19,420
但只是理论上可行

300
00:20:19,420 --> 00:20:22,980
实践太过繁琐

301
00:20:22,980 --> 00:20:24,310
而没有能被运用

302
00:20:24,310 --> 00:20:28,060
也许存有简单的方式实现原地归并

303
00:20:28,060 --> 00:20:31,500
这就有待我们去发现

304
00:20:31,500 --> 00:20:34,480
不过现在有些切实可行的改进

305
00:20:34,480 --> 00:20:39,690
能让归并算法变得高效

306
00:20:39,690 --> 00:20:41,930
这就来看一下

307
00:20:41,930 --> 00:20:48,150
因为这种技巧也能用于其他算法

308
00:20:48,150 --> 00:20:53,640
首先对特别小的数组运用归并排序太过复杂

309
00:20:53,640 --> 00:20:58,880
比如大小为二三四的数组

310
00:20:58,880 --> 00:21:03,950
归并它们时调用函数也会有开销

311
00:21:03,950 --> 00:21:09,660
更糟糕的是

312
00:21:09,660 --> 00:21:13,480
不断地递归会分出很多很多小数组

313
00:21:13,480 --> 00:21:17,290
所以第一个改进就是进行切分

314
00:21:17,290 --> 00:21:22,510
对小于某个数值的小数组采用插入排序
这样能更加有效

315
00:21:22,510 --> 00:21:26,790
所以加入这一行能让归并更快

316
00:21:26,790 --> 00:21:27,490
快大约20%

317
00:21:29,140 --> 00:21:33,330
第二个对算法的改进可以是

318
00:21:33,330 --> 00:21:38,520
当(merge之前)两个子数组间如果已是顺序

319
00:21:38,520 --> 00:21:40,950
便可跳过此轮归并

320
00:21:40,950 --> 00:21:44,120
判断这种情况只需判断

321
00:21:44,120 --> 00:21:48,190
前一半最大的数是否小于后一半最小的数

322
00:21:48,190 --> 00:21:49,990
仅此而已

323
00:21:49,990 --> 00:21:51,080
So easy.

324
00:21:51,080 --> 00:21:53,860
因此我们就在归并前加一句判断

325
00:21:53,860 --> 00:21:57,880
检测子数组是否有序

326
00:21:57,880 --> 00:22:00,160
这样...

327
00:22:00,160 --> 00:22:03,560
只要在每个归并前检测一下

328
00:22:03,560 --> 00:22:09,880
也只需线性复杂度的时间即可完成

329
00:22:09,880 --> 00:22:13,520
这至少在一些情况下是有帮助的

330
00:22:13,520 --> 00:22:15,490
这至少在一些情况下是有帮助的

331
00:22:18,120 --> 00:22:23,470
另一个可以改进的比较费解

332
00:22:23,470 --> 00:22:28,370
所以只推荐于专业人士

333
00:22:28,370 --> 00:22:33,320
改进在于节省下拷贝到辅助数组的时间

334
00:22:33,320 --> 00:22:36,650
这种改进相当于每一轮递归时

335
00:22:36,650 --> 00:22:40,520
转换一下原数组和辅助数组的角色

336
00:22:40,520 --> 00:22:43,120
不过还是需那个辅助数组

337
00:22:43,120 --> 00:22:48,160
代码可以这样改——

338
00:22:48,160 --> 00:22:52,240
将sort结果放入另一数组

339
00:22:52,240 --> 00:22:55,240
将merge结果合并回原数组

340
00:22:55,240 --> 00:22:59,930
所以递归函数同时也完成了交换两个数组角色的任务

341
00:22:59,930 --> 00:23:02,490
这就意味着不用花时间拷贝元素进辅助数组

342
00:23:02,490 --> 00:23:04,890
就节省下了一点时间

343
00:23:06,870 --> 00:23:09,630
这个是归并排序的可视化效果

344
00:23:09,630 --> 00:23:15,110
用到了小数组的切分

345
00:23:15,110 --> 00:23:19,770
一些小的数组就不再通过归并来排序

346
00:23:19,770 --> 00:23:25,360
这样你能够直观感受到归并是如何完成的

347
00:23:25,360 --> 00:23:28,828
比如前两行两块黑色是最先进行归并的

348
00:23:28,828 --> 00:23:32,429
然后下面以此类推

349
00:23:32,429 --> 00:23:34,765
这是一个很好的展示

350
00:23:34,765 --> 00:23:40,577
在下节课中

351
00:23:40,577 --> 00:23:45,650
我们将看到归并排序不同的实现方式