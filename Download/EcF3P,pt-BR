1
00:00:01,078 --> 00:00:08,004
Agora vamos olhar para a nossa primeira implementação de um algoritmo para resolver a dinâmica

2
00:00:08,004 --> 00:00:14,012
problema de conectividade, chamado Quick-encontrar. Este é um algoritmo de chamada ansiosos, por

3
00:00:14,012 --> 00:00:20,013
resolver problema atividade tipo. A estrutura de dados que vamos usar para

4
00:00:20,013 --> 00:00:25,082
o apoio do algoritmo é simplesmente uma matriz de inteiros indexados pelo objeto. O

5
00:00:25,082 --> 00:00:31,099
interpretação é os dois objetos, P e Q estão ligados se e somente se, o seu

6
00:00:31,099 --> 00:00:39,005
entradas na matriz são os mesmos. Assim, por exemplo, neste exemplo, com o nosso 10

7
00:00:39,005 --> 00:00:46,099
objetos da matriz idéia de que descreve a situação após sete ligações é

8
00:00:46,099 --> 00:00:53,349
ilustrada no meio da lâmina. De modo que, depois de o, neste ponto zero, cinco,

9
00:00:53,349 --> 00:00:59,578
e seis são todos no mesmo componente ligado, porque eles têm a mesma

10
00:00:59,578 --> 00:01:05,171
entrada matriz, zero. Um, dois, e sete todos têm uma entrada. E três, quatro, oito,

11
00:01:05,171 --> 00:01:10,664
e nove têm entrada oito. Assim que a representação é, mostra que eles são

12
00:01:10,664 --> 00:01:16,636
conectado. E, claramente, que vai apoiar uma rápida implementação do achado

13
00:01:16,636 --> 00:01:22,439
operação. Acabamos de verificar as entradas de matriz para ver se eles são iguais. Verifique se P e Q

14
00:01:22,439 --> 00:01:27,904
ter a mesma identificação. Assim, seis e um ter identificações diferentes. Um deles tem um ID, seis tem ID

15
00:01:27,904 --> 00:01:34,171
zero. Eles não estão no mesmo componente conectado. União é mais difícil no

16
00:01:34,171 --> 00:01:40,981
visando a integração de componentes, contendo dois objetos dados. Temos que mudar tudo

17
00:01:40,981 --> 00:01:47,755
as entradas, cuja identificação é igual a uma delas para o outro. E arbitrariamente nós

18
00:01:47,755 --> 00:01:53,634
optar por alterar esses que são os mesmos que P para os que são mesmo Q.

19
00:01:53,634 --> 00:01:58,898
Então, se nós estamos indo para a união de seis e um, então temos de alterar as entradas zero, cinco,

20
00:01:58,898 --> 00:02:04,741
e seis. Todo mundo no mesmo componente conectado como seis. De zero a um. E

21
00:02:04,741 --> 00:02:10,917
esta é, como veremos, este é um pouco de um problema quando temos um grande número de

22
00:02:10,917 --> 00:02:16,927
objetos, porque há um monte de valores que podem mudar. Mas ainda assim, é fácil

23
00:02:16,927 --> 00:02:23,263
implemento, de modo que vai ser o nosso ponto de partida. Então, vamos começar com um, uma demonstração de

24
00:02:23,263 --> 00:02:31,189
como isso funciona. Assim, inicialmente, montamos a matriz de identificação, com cada entrada, igual a

25
00:02:31,189 --> 00:02:37,932
seu índice. E assim tudo o que diz é que todos os objetos são independentes. Eles são

26
00:02:37,932 --> 00:02:43,918
no seu próprio componente conectado. Agora, quando temos uma operação de união. Assim, digamos,

27
00:02:43,918 --> 00:02:49,694
quatro é suposto ser unio n com três. Então nós vamos mudar, todas as entradas,

28
00:02:49,694 --> 00:02:56,190
cuja identificação é igual ao ID primeiro para o segundo. Portanto, neste caso, nós vamos mudar

29
00:02:56,190 --> 00:03:02,061
, conecte três e quatro meios que temos de mudar os quatro a um três. E

30
00:03:02,061 --> 00:03:10,259
nós vamos continuar a fazer um pouco mais para que você terá uma idéia de como ele funciona. Assim, três e

31
00:03:10,259 --> 00:03:13,657
oito agora de modo a conectar-se três e oito agora três e quatro têm de ser ligados a

32
00:03:13,657 --> 00:03:19,950
oito. Assim, ambas as entradas têm de mudar para oito. Ok? Então, agora, o que dizer

33
00:03:19,950 --> 00:03:26,026
seis e cinco? Então, novamente, nós mudamos o primeiro a combinar a segunda. Então, para

34
00:03:26,026 --> 00:03:32,332
connect seis e cinco, mudamos a seis para cinco. O que cerca de nove e quatro? Então, agora

35
00:03:32,332 --> 00:03:39,789
temos que mudar o, para ligar nove e quatro, nós temos que mudar, a entrada de 9 para ser

36
00:03:39,789 --> 00:03:45,325
o mesmo que 4 a. Portanto, agora temos três, quatro, oito e nove. Todos têm entradas

37
00:03:45,325 --> 00:03:52,365
oito. Eles estão todos no mesmo componente conectado. Dois e um meio que

38
00:03:52,365 --> 00:04:00,013
connect dois e mudando a 2201. Oito e nove já estão ligados. Eles

39
00:04:00,013 --> 00:04:06,660
, têm as mesmas entradas na matriz idéia. Então, essa consulta conectado, que diz encontrar,

40
00:04:06,660 --> 00:04:13,096
verdade, eles já estão conectados. E cinco e zero têm entradas diferentes. Eles são

41
00:04:13,096 --> 00:04:21,780
não ligado, assim que nós return false, nesse caso, não está conectado. E então, se nós

42
00:04:21,780 --> 00:04:31,617
deseja se conectar cinco e zero. Depois, como de costume, vai se conectar, a entrada

43
00:04:31,617 --> 00:04:39,855
correspondendo a ambos cinco e seis para zero. Sete e dois, união de sete e dois.

44
00:04:39,865 --> 00:04:49,623
Isso é fácil. E união, seis e um para que haja três entradas que tem que começar

45
00:04:49,623 --> 00:04:57,899
alterado. Todos esses zeros tem que se mudou para uns. Então, isso é uma demonstração rápida

46
00:04:57,899 --> 00:05:04,126
de Quick-encontrar. Agora vem veremos o código para que implementating. Ok, com

47
00:05:04,126 --> 00:05:10,628
esta demonstração concreta em mente, então mover-se para codificação esta algorithim é bastante

48
00:05:10,628 --> 00:05:16,518
para a frente. Apesar de ser um exercício de programação interessante que um

49
00:05:16,518 --> 00:05:23,312
muitos de nós iria ficar errado da primeira vez. Então, vamos começar com o construtor, bem

50
00:05:23,312 --> 00:05:29,125
temos um, uma matriz inteiro privado. Essa é a nossa matriz de identificação. Essa é a estrutura de dados

51
00:05:29,125 --> 00:05:33,953
que vai apoiar esta implementação. O construtor tem de

52
00:05:33,953 --> 00:05:40,637
criar a matriz e, em seguida, passar e definir o valor correspondente a cada índice

53
00:05:40,637 --> 00:05:47,200
I I. Isso é para a frente. A operação de localização ou operação conectada. Isso é

54
00:05:47,200 --> 00:05:53,024
a uma fácil. Este é o algoritmo Quick-encontrar. Por isso, simplesmente leva seus dois

55
00:05:53,024 --> 00:05:58,552
argumentos, P e Q, e verifica se suas entradas de ID são iguais, e retorna

56
00:05:58,552 --> 00:06:04,077
valor. Se eles são iguais, ele retorna true. Se eles não são iguais, ele retorna

57
00:06:04,077 --> 00:06:09,942
falso. O implemento operação mais complicada é a união. E lá, encontramos

58
00:06:09,942 --> 00:06:15,803
primeiro o ID correspondente com o primeiro argumento, e, em seguida, o ID correspondente à

59
00:06:15,803 --> 00:06:21,018
o segundo argumento. E então passamos por todo o conjunto, e à procura de

60
00:06:21,018 --> 00:06:27,068
as entradas cujas identificações são iguais ao ID do primeiro argumento, e definir aqueles a

61
00:06:27,068 --> 00:06:32,565
a identificação do segundo argumento. Isso é uma implementação bastante simples. E

62
00:06:32,565 --> 00:06:38,156
eu mencionei que muitos de nós não nos levaria a mal. O erro que pode fazer é colocar

63
00:06:38,156 --> 00:06:43,660
ID de P aqui em vez de primeiro escolhendo, esse valor. E você pode pensar

64
00:06:43,660 --> 00:06:48,672
as implicações disso. Isso é um bug insidioso. Então, isso é uma multa

65
00:06:48,672 --> 00:06:54,900
implementação de QuickFind para a próxima coisa a decidir é como eficaz ou

66
00:06:54,900 --> 00:07:01,152
eficiente algoritmo que vai ser e vamos conversar com alguns detalhes sobre como

67
00:07:01,152 --> 00:07:07,088
fazer isso, mas, para isso, é suficiente apenas para pensar sobre o número de vezes que o

68
00:07:07,088 --> 00:07:12,901
código tem de acessar a matriz. Como vimos ao fazer a implementação, tanto o

69
00:07:12,901 --> 00:07:19,019
inicializado e operações sindicais envolvidos tona loop que passar por todo o

70
00:07:19,019 --> 00:07:25,469
matriz. Então eles têm que tocar em uma proporcional constante para n vezes depois de tocar

71
00:07:25,469 --> 00:07:32,155
entrada matriz. Encontre Operação é rápido, é só para um número constante de vezes verificar

72
00:07:32,155 --> 00:07:37,829
entradas de matriz. E o que é problemático, porque a operação de união é muito

73
00:07:37,829 --> 00:07:45,708
caro. Em particular, se você só tem em comandos sindicais em objetos N que é

74
00:07:45,708 --> 00:07:52,515
razoável. Eles estão conectados ou não, então, que vai levar tempo quadrática

75
00:07:52,515 --> 00:07:58,458
no tempo ao quadrado. E um dos temas que nós vamos passar por mais e mais em

76
00:07:58,458 --> 00:08:04,531
claro que isso é que o tempo quadrática é muito lento. E nós não podemos aceitar quadrática

77
00:08:04,531 --> 00:08:10,796
algoritmos de tempo para problemas de grande porte. A razão é que eles não escala. Como os computadores

78
00:08:10,796 --> 00:08:16,305
chegar mais rápido e maior, algoritmos quadráticos realmente ficar mais lento. Agora, vamos

79
00:08:16,305 --> 00:08:22,464
apenas falar sobre o que eu mais ou menos dizer com isso. Um padrão muito áspera, dizer, por agora,

80
00:08:22,464 --> 00:08:29,206
é que as pessoas têm computadores que podem ser executados bilhões de operações por segundo, e

81
00:08:29,206 --> 00:08:34,815
eles têm milhares de milhões de entradas na memória principal. Então, isso significa que você pode

82
00:08:34,815 --> 00:08:40,916
tocar tudo na memória principal em cerca de um segundo. Esse é um tipo de uma incrível

83
00:08:40,916 --> 00:08:46,907
fato de que este padrão áspero é realmente realizada por 50 ou 60 anos. Os computadores ficam

84
00:08:46,907 --> 00:08:52,735
maior, mas eles ficam mais rápido para tocar tudo na memória vai ter

85
00:08:52,735 --> 00:08:57,403
alguns segundos. Agora é verdade que os computadores só tem alguns milhares de palavras

86
00:08:57,403 --> 00:09:04,657
de memória e é verdade, agora que eles têm bilhões ou mais. Então, vamos aceitar isso como

87
00:09:04,657 --> 00:09:11,873
que os computadores são como. Agora, o que significa é que, com essa grande capacidade de memória, podemos

88
00:09:11,873 --> 00:09:17,712
endereço enormes problemas. Para que pudéssemos ter, bilhões de objetos, e esperamos fazer

89
00:09:17,712 --> 00:09:23,608
bilhões de união comanda sobre eles. E, mas o problema com que localização rápida

90
00:09:23,608 --> 00:09:29,770
algoritmo é que, que levaria 10 ^ 18 operações, ou, digamos axises matriz

91
00:09:29,770 --> 00:09:35,098
ou tocar memória. E se você fizer as contas, que funciona a 30 de alguns anos de

92
00:09:35,098 --> 00:09:42,033
tempo de computador. Obviamente, não prático para resolver um tal problema em hoje

93
00:09:42,033 --> 00:09:48,057
computador. E, ea razão é, eo problema é que os algoritmos quadráticos não

94
00:09:48,057 --> 00:09:54,097
escala com a tecnologia. Você pode ter um novo computador que é 10 vezes mais rápido, mas

95
00:09:54,097 --> 00:10:00,033
você poderia resolver um problema que é 10 vezes maior. E com uma quadrática

96
00:10:00,033 --> 00:10:06,028
algoritmo quando você faz isso. Vai ser dez vezes mais lenta. Esse é o tipo de

97
00:10:06,028 --> 00:10:11,048
situação que estamos indo para tentar evitar através do desenvolvimento de algoritmos mais eficientes para

98
00:10:11,048 --> 00:10:13,020
resolver problemas como este.