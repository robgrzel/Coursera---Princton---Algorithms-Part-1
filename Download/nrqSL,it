1
00:00:02,079 --> 00:00:07,071
Fare delle osservazioni su ciò che succede, come
abbiamo fatto nella sezione precedente, ci permette

2
00:00:07,071 --> 00:00:12,075
di prevedere la performance ma non ci permette
di capire veramente cosa sta facendo l'algoritmo.

3
00:00:12,075 --> 00:00:17,056
Quindi ora vedremo un modello matematico.
Un modo per concettualizzare meglio

4
00:00:17,056 --> 00:00:24,080
quello che succede veramente. Lo ripeto,
questo concetto è stato sviluppato e reso

5
00:00:24,080 --> 00:00:33,047
popolare da Don Knuth a partire dalla fine degli
anni '60. A quel tempo, per la prima volta

6
00:00:33,047 --> 00:00:40,068
i computer stavano diventando qualcosa di
complesso. E gli informatici erano

7
00:00:40,068 --> 00:00:46,015
preoccupati chiedendosi se saremmo stati
in grado di capire veramente ciò che stava

8
00:00:46,015 --> 00:00:52,043
succedendo. E Knuth fu molto diretto nel
dire che questo era qualcosa che certamente

9
00:00:52,043 --> 00:00:56,884
saremmo stati in grado di fare. Possiamo calcolare il
tempo di esecuzione totale di un programma

10
00:00:57,087 --> 00:01:02,059
identificando le operazioni di base, definendo il
costo di ognuna, calcolando la frequenza con cui

11
00:01:02,059 --> 00:01:07,043
vengono eseguite e infine sommando il costo moltiplicato
per la frequenza di tutte le operazioni.

12
00:01:07,043 --> 00:01:11,083
Bisogna analizzare il programma per
determinare qual è l'insieme delle

13
00:01:11,083 --> 00:01:17,004
operazioni e il costo delle operazioni
dipende dal computer come abbiamo detto

14
00:01:17,004 --> 00:01:22,038
in precedenza. La frequenza ci riporta alla
matematica perché dipende dall'algoritmo

15
00:01:22,038 --> 00:01:27,369
e dai dati in input. Knuth ha scritto una
serie di libri che fanno un'analisi dettagliata

16
00:01:27,369 --> 00:01:34,678
ed esatta per un gran numero di algoritmi usando
un particolare modello di computer.

17
00:01:34,678 --> 00:01:39,997
Perciò, grazie a Knuth, sappiamo che in
generale possiamo definire degli accurati

18
00:01:39,997 --> 00:01:46,700
modelli matematici per la performance degli
algoritmi o programmi in esecuzione.

19
00:01:46,700 --> 00:01:53,156
Allora, vediamo un po' più nel dettaglio
questa procedura. È possibile fare degli

20
00:01:53,156 --> 00:01:59,044
esperimenti. Ai miei tempi si guardava
nel manuale del computer

21
00:01:59,044 --> 00:02:04,621
e ogni computer aveva un proprio manuale che
diceva precisamente quanto tempo richiedeva ciascuna

22
00:02:04,621 --> 00:02:09,589
istruzione. Ma oggi, è un po' più
complicato. Perciò facciamo degli esperimenti

23
00:02:09,589 --> 00:02:15,079
per esempio facendo un miliardo di addizioni
e calcolando che, magari, sul vostro computer un'addizione

24
00:02:15,079 --> 00:02:20,432
richiede 2,1 nanosecondi. Oppure potete eseguire
funzioni più complicate come

25
00:02:20,432 --> 00:02:25,126
come il seno o l'arcotangente anche se questo
si avvicina già all'analisi degli algoritmi.

26
00:02:25,126 --> 00:02:30,644
Perciò ci sono vari modi per determinare
i costi delle operazioni di base.

27
00:02:30,644 --> 00:02:38,182
Ma nella maggior parte dei casi assumeremo
semplicemente che è una qualche costante

28
00:02:38,182 --> 00:02:44,137
che è possibile determinare in
qualche modo.

29
00:02:44,137 --> 00:02:49,477
Tuttavia quando usiamo delle collezioni di N
oggetti,

30
00:02:49,477 --> 00:02:54,845
ci sono delle operazioni che richiedono un tempo
proporzionale ad N. Per esempio se allochiamo

31
00:02:54,845 --> 00:03:00,591
un array di dimensione N, è necessario un tempo
proporzionale ad N perché in Java

32
00:03:00,591 --> 00:03:06,061
tutti gli elementi nell'array vengono inizializzati
a zero. Nelle altre operazioni

33
00:03:06,061 --> 00:03:11,951
il tempo richiesto dipende dall'implementazione.
Una particolarmente importante è la

34
00:03:11,951 --> 00:03:17,503
concatenazione di stringhe. Se concateniamo
due stringhe il tempo di esecuzione è

35
00:03:17,503 --> 00:03:23,832
proporzionale alla lunghezza totale della stringa.
Molti principianti in Java commettono un

36
00:03:23,832 --> 00:03:30,713
errore pensando che ciò richieda un tempo
costante, ma non è affatto così. Va bene,

37
00:03:30,713 --> 00:03:39,428
questo è quanto per il costo di ogni operazione.
Più interessante è invece la frequenza con cui

38
00:03:39,428 --> 00:03:46,229
vengono eseguite le operazioni. Ecco una
semplice variante del problema 3-sum.

39
00:03:46,229 --> 00:03:50,237
È il problema 1-sum. Cioè, quanti numeri
sono uguali a zero?

40
00:03:50,237 --> 00:03:54,333
Quanti gruppi di un numero sommano a zero?

41
00:03:54,333 --> 00:03:59,111
C'è solo un ciclo for per controllare quali
numeri sono uguali a zero e incrementare count se

42
00:03:59,111 --> 00:04:05,417
è il caso. Analizzando il codice vediamo che
sono dichiarate le variabili i e count e

43
00:04:05,417 --> 00:04:11,511
e gli viene assegnato il valore zero.
Le variabili i e N vengono confrontate N+1 volte.

44
00:04:11,511 --> 00:04:17,484
A[i] viene confrontato con il valore zero
N volte.

45
00:04:17,484 --> 00:04:23,985
Si accede all'array N volte. Il numero di volte che si esegue
un'operazione di incremento è variabile.

46
00:04:23,985 --> 00:04:30,251
i è incrementata N volte, ma count può essere
incrementata da zero a N volte.

47
00:04:30,251 --> 00:04:37,432
Perciò la frequenza dipende dai dati di input.
Potremmo avere bisogno di un modello

48
00:04:37,432 --> 00:04:43,369
per descrivere questo oppure forse ci sono
altre operazioni molto più costose e perciò non

49
00:04:43,369 --> 00:04:48,289
dobbiamo preoccuparci di questo.
Va bene, ora vediamo la versione più complicata

50
00:04:48,289 --> 00:04:53,678
del problema appena visto. Quale sarà
la frequenza di esecuzione delle istruzioni

51
00:04:53,678 --> 00:04:59,039
in questo programma che risolve il problema 2-sum?
Quante coppie di interi sommano a zero?

52
00:04:59,324 --> 00:05:06,207
Beh, in questo caso, c'è bisogno di fare
qualche calcolo per vedere che quando

53
00:05:06,465 --> 00:05:14,510
i varia tra zero e N, e j varia da i+1 a N
il numero di accessi all'array

54
00:05:14,510 --> 00:05:21,812
è due per ogni volta che si esegue 
l'istruzione if,

55
00:05:21,812 --> 00:05:28,044
una volta per a[i] e una per a[j].
L'istruzione if è eseguita N-1 volte la

56
00:05:28,044 --> 00:05:34,394
prima volta che si esegue il ciclo for,
N-2 la seconda e così via. Questa è la somma degli interi

57
00:05:34,637 --> 00:05:40,395
da zero a N-1 che è una semplice somma discreta che
equivale a N*(N-1)/2 e

58
00:05:40,395 --> 00:05:47,383
siccome il numero di accessi all'array per ogni
istruzione if è due, il risultato è N*(N-1).

59
00:05:47,383 --> 00:05:54,516
Perciò potremmo calcolare precisamente
questi valori per ogni operazione ma sta già

60
00:05:54,516 --> 00:06:01,465
diventando piuttosto noioso. Già Turing,
così come Babbage, erano interessati a

61
00:06:01,465 --> 00:06:06,921
definire una misura per la quantità di lavoro
necessaria per svolgere una certa computazione.

62
00:06:06,921 --> 00:06:12,909
Turing notò che non era necessario tenere
conto di tutti i minimi dettagli.

63
00:06:12,909 --> 00:06:18,975
Anche una stima grossolana può essere
utile. Perciò è possibile contare il numero

64
00:06:18,975 --> 00:06:24,920
di volte che ogni operazione viene eseguita,
associargli un costo e fare tutte le operazioni

65
00:06:24,920 --> 00:06:32,113
tediose viste prima. Ma forse sarebbe meglio
contare solo quelle più costose e

66
00:06:32,113 --> 00:06:39,614
questo è quello che Turing pensò nel 1947.
E realisticamente è ciò che oggi facciamo.

67
00:06:39,614 --> 00:06:46,852
Perciò invece che adoperarsi per mettere
in conto ogni minimo dettaglio, prendiamo

68
00:06:46,852 --> 00:06:52,856
qualche operazione di base che forse è
la più costosa oppure quella che è eseguita

69
00:06:53,071 --> 00:06:59,480
più spesso. Quella per cui il costo moltiplicato
per la frequenza ha il valore più alto e

70
00:06:59,480 --> 00:07:05,075
usare quella come mezzo per stimare
il tempo di esecuzione. Essenzialmente ipotizzando

71
00:07:05,075 --> 00:07:10,237
che il tempo di esecuzione effettivo crescerà
come una costante moltiplicata per quel valore.

72
00:07:10,237 --> 00:07:15,278
Nel nostro esempio scegliamo l'operazione di
accesso all'array. Questa è la prima semplificazione.

73
00:07:15,278 --> 00:07:20,383
La seconda è che ignoreremo i termini di
basso grado nella formula che otterremo.

74
00:07:20,383 --> 00:07:26,239
Esiste un modo semplice per fare ciò,
la cosiddetta notazione tilde.

75
00:07:26,481 --> 00:07:33,552
L'idea di base è che quando N ha un valore
molto grande in una formula come questa

76
00:07:33,552 --> 00:07:40,492
il termine N^3 è molto più grande che il termine N o sedici.
Infatti è così grande che questi termini di basso grado

77
00:07:40,773 --> 00:07:47,845
quasi scompaiono in confronto. Perciò tutte queste
formule sono tilde un sedicesimo N^3

78
00:07:47,853 --> 00:07:54,344
e questo è un buon rappresentante o
approssimazione di queste quantità.

79
00:07:54,344 --> 00:08:00,766
Inoltre è più semplice calcolare il valore
delle formule se non si contano i termini di basso grado.

80
00:08:00,766 --> 00:08:05,963
Perciò, tenendo in conto solo una operazione
e non contando i termini di basso grado...

81
00:08:05,963 --> 00:08:11,653
... a proposito questa è la definizione formale
della notazione tilde.

82
00:08:11,885 --> 00:08:16,868
f(N) tilde g(N) significa che il limite di f(N)/g(N) per N che
tende all'infinito è uguale a uno.

83
00:08:16,868 --> 00:08:23,395
Se uno vuole può verificare che questa uguaglianza
vale in queste situazioni.

84
00:08:23,395 --> 00:08:30,482
Perciò questo semplifica molto i conti delle frequenze.
Qui, per esempio, si riduce a tilde N^2.

85
00:08:30,482 --> 00:08:36,049
Anche per l'istruzione incremento abbiamo tilde N^2
per il problema 2-sum.

86
00:08:36,049 --> 00:08:41,323
Va bene. Per ripetere, quando N è grande
i termini di basso grado sono trascurabili

87
00:08:41,323 --> 00:08:46,493
e quando N è molto piccolo i termini di basso
grado non sono trascurabili ma non ci interessa

88
00:08:46,493 --> 00:08:51,522
perché stiamo cercando di stimare il tempo di
esecuzione per grandi valori di N. Per piccoli valori

89
00:08:51,522 --> 00:08:57,491
di N il tempo sarà comunque poco a prescindere.
Perfetto, allora adesso usiamo sia il modello di costo

90
00:08:57,491 --> 00:09:04,228
semplificato che la notazione tilde e perciò
possiamo dire che il programma esegue tilde N^2

91
00:09:04,228 --> 00:09:11,630
accessi all'array e implicitamente abbiamo fatto
l'ipotesi che il tempo di esecuzione è

92
00:09:11,630 --> 00:09:18,362
tilde una costante moltiplicata per N^2.
Va bene, ora vediamo quanti accessi

93
00:09:18,362 --> 00:09:25,618
all'array vengono fatti nel problema 3-sum.
Abbiamo tre cicli for per cui dobbiamo risolvere

94
00:09:25,618 --> 00:09:32,888
un problema combinatorio più complicato
ma non è poi così difficile.

95
00:09:33,151 --> 00:09:40,710
Siamo interessati a sapere, avendo N interi,
in quanti modi è possibile sceglierne tre:

96
00:09:40,963 --> 00:09:48,188
ma è il coefficiente binomiale! Facendo
qualche calcolo e usando la notazione tilde

97
00:09:48,188 --> 00:09:54,284
otteniamo che il risultato è tilde 1/6*N^3.
Per ogni gruppo di tre interi eseguiamo

98
00:09:54,284 --> 00:10:01,006
tre accessi all'array, perciò il risultato è
1/2*N^3. Come abbiamo visto non contiamo

99
00:10:01,006 --> 00:10:07,581
e sommiamo il costo di ogni singola operazione,
è troppo lavoro! Scegliamo solo quelle più costose in termini

100
00:10:07,795 --> 00:10:15,170
di costo moltiplicato per frequenza e approssimiamo
questo valore cercando di ottenere un buon modello per

101
00:10:15,462 --> 00:10:22,422
il tempo di esecuzione. Va bene, ora non
faremo un corso di matematica discreta ma

102
00:10:22,422 --> 00:10:29,101
ci sono alcune nozioni di base che useremo
e non sono così difficili da capire.

103
00:10:29,101 --> 00:10:35,245
A volte capita di dover stimare il valore di
una somma discreta.

104
00:10:35,245 --> 00:10:40,872
Come abbiamo fatto per la somma di uno
più due ... fino a N. Oppure la somma dei quadrati

105
00:10:41,118 --> 00:10:48,044
o altre cose come il triplo ciclo nel problema 3-sum.
Se avete studiato un po' di calcolo infinitesimale

106
00:10:48,044 --> 00:10:53,351
un modo di pensarla è semplicemente
sostituendo la sommatoria con un integrale.

107
00:10:53,351 --> 00:10:58,158
Questo metodo solitamente funziona. Oppure possiamo
usare la formula di Eulero-Maclaurin per ottenere

108
00:10:58,158 --> 00:11:03,920
un'approssimazione migliore. In questo modo
potete fidarvi di noi quando vi diciamo che

109
00:11:03,920 --> 00:11:10,409
una cosa è tilde 1/2*N^2 oppure la somma
di 1 più 1/2 più 1/3 ... fino a 1/N è

110
00:11:10,409 --> 00:11:16,378
l'integrale da 1 a N di 1/x che equivale al
logaritmo naturale di N.

111
00:11:16,378 --> 00:11:22,262
E nel caso del triplo ciclo del problema
3-sum

112
00:11:22,262 --> 00:11:27,214
otteniamo che il risultato è 1/16*N^3
se siete pratici con gli integrali multipli.

113
00:11:27,438 --> 00:11:33,368
Esistono molte altre tecniche che vengono
usate in questi casi. E non ve le insegneremo

114
00:11:33,368 --> 00:11:38,774
tutte, ma a volte faremo riferimento a
risultati di questo tipo.

115
00:11:38,774 --> 00:11:45,637
Va bene, perciò in teoria Knuth ci dice
che modelli matematici accurati sono possibili.

116
00:11:45,637 --> 00:11:52,928
Ma in pratica si ottengono delle formule
matematiche molto complesse. Inoltre può

117
00:11:52,928 --> 00:11:59,568
essere necessario conoscere della matematica
avanzata per la gioia dei teorici ma che forse

118
00:11:59,799 --> 00:12:06,565
delle persone che stanno seguendo un corso di
algoritmi per la prima volta potrebbero non conoscere.

119
00:12:06,565 --> 00:12:12,338
Quindi è meglio lasciare i modelli esatti agli esperti,
in quanto spesso diventano molto complicati.

120
00:12:12,338 --> 00:12:19,079
D'altronde i modelli approssimati sono
decisamente utili.

121
00:12:19,079 --> 00:12:25,087
E per ogni algoritmo che considereremo
cercheremo di dare un ragionevole modello approssimato

122
00:12:25,087 --> 00:12:31,656
che può essere usato per definire
il suo tempo di esecuzione.

123
00:12:31,656 --> 00:12:38,035
A volte daremo la dimostrazione matematica
e altre volte

124
00:12:38,035 --> 00:12:48,060
citeremo soltanto il lavoro di qualche esperto.