1
00:00:03,054 --> 00:00:09,019
Isten hozott újra. Ma megnézünk
számos olyan érdekes

2
00:00:09,019 --> 00:00:15,011
szimbólum tábla és bináris keresőfa
adatstruktúra alkalmazási lehetőséget, amellyel

3
00:00:15,011 --> 00:00:21,413
geometriai adatok feldolgozásával kapcsolatos
problémák kezelhetőek. Nosza nézzük. A gondolat

4
00:00:21,413 --> 00:00:27,378
az, hogy geometriai objektumokról
és nem szimpla kulcsokról, úgy mint

5
00:00:27,378 --> 00:00:33,338
karakterfüzérekről vagy számokról, fogunk beszélni.
Nézzünk egy példát. Legyenek a geometriai objektumaink pontok

6
00:00:33,338 --> 00:00:38,346
a síkban és határozzunk meg egy olyan téglalapot
amely oldalai

7
00:00:38,346 --> 00:00:43,404
a horizontális/vertikális tengelyekkel párhuzamosak.
Feltehetjük a kérdést, mely pontok helyezkednek a téglalapon

8
00:00:43,404 --> 00:00:48,200
belül vagy hány pont van a téglalapon
belül? Vagy lehet, hogy amit

9
00:00:48,200 --> 00:00:54,011
feldolgozunk, azok téglalapok. Van egy halmaz
téglalapunk és szeretnénk tudni, hogy

10
00:00:54,011 --> 00:01:00,291
ezek közül melyek metszik egymást? Vagy hogy
hány téglalap metszéspontunk van? Ezek

11
00:01:00,291 --> 00:01:05,837
érdekes problémák amiknek sok-sok
alkalmazása van, kezdve

12
00:01:05,837 --> 00:01:11,806
a számítógépes tervezéssel, játékokon és filmeken át egészen olyan absztrakciókig mint

13
00:01:11,806 --> 00:01:17,849
adatbázisok és olyan egyéb szituációk, amikhez
többszörös kulcs vagy több dimenzió társul.

14
00:01:18,065 --> 00:01:24,856
Kifejezetten érdekes kiterjesztése ez azoknak
a gondolatoknak, amikkel a szimbólum táblák

15
00:01:24,856 --> 00:01:30,175
különféle ismerős felhasználási formái során találkoztunk. És meglepő módön a bináris

16
00:01:30,175 --> 00:01:34,300
keresőfa és a már megismert
kapcsolódó algoritmusok biztosítják

17
00:01:34,300 --> 00:01:39,774
majd számos a területhez kapcsolódó
probléma hatékony megoldását.

18
00:01:39,774 --> 00:01:45,943
És lehetővé tették új fejlesztések
és új technológiák kialakulását ezekben

19
00:01:45,943 --> 00:01:51,135
az alkalmazásokban. Szóval, felvezetőnek
egy egyszerű problémával,

20
00:01:51,135 --> 00:01:56,761
az egy dimenziós intervallum kereséssel foglalkounk.
Valóban ez az alapja mindannak, amivel majd

21
00:01:56,761 --> 00:02:02,146
foglalkozunk. Egy csöppnyi kiterjesztése
annak a rendezett szimbólum tábla API-nak

22
00:02:02,146 --> 00:02:07,837
amit korábban lefektettünk és olyan műveleteink
lesznek, mint intervallum-keresés és

23
00:02:07,837 --> 00:02:12,797
intervallum-elemszám. Az egy dimenziós csak
annyit jelenti, hogy egy kulcsunk van, szóval

24
00:02:12,797 --> 00:02:19,116
ahogy korábban, kulcs érték párosokat szúrunk be
és szeretnénk majd a kulcsokra és a

25
00:02:19,116 --> 00:02:24,770
hozzájuk tartozó értékekre keresni, szeretnénk törölni.
Illetve szeretnénk majd ezeket

26
00:02:24,770 --> 00:02:30,703
az intervallum-keresés és intervallum-elemszám műveleteket. Szóval, adott kulcsok közötti

27
00:02:30,703 --> 00:02:36,083
kulcsokat megtalálni vagy megmondani, hogy hány
darab kulcs található két megadott kulcs között. Ebben

28
00:02:36,083 --> 00:02:42,251
a jobb oldali példában számos kulcsot beszúrunk
és rendezett sorrendben mutatjuk őket.

29
00:02:42,251 --> 00:02:47,992
Aztán megkérdezhetnénk, hogy
ugyan hány kulcs is van

30
00:02:47,992 --> 00:02:53,780
a g és k kulcsok között? Jelen esetben,
csak kettő. És akkor a kliens megkérdezhetné,

31
00:02:53,780 --> 00:02:59,598
hogy ugyan mik is azok a kulcsok és akkor mi
szeretnénk visszaadni őket. Ez egy nagyon

32
00:02:59,598 --> 00:03:06,010
gyakori művelet például adatbázisokban.
Szeretnénk megtalálni hány adófizető

33
00:03:06,010 --> 00:03:11,335
fizetése található az egymilliós és tízmilliós
tartományban és aztán azt, hogy kik is ők és

34
00:03:11,335 --> 00:03:17,431
így tovább. Szóval, az intervallum keresés egy nagyon
fontos fundamentális művelet. Most, a

35
00:03:17,431 --> 00:03:23,459
geometriai értelmezésben
a kulcsok pontok egy vonalon. És a

36
00:03:23,459 --> 00:03:29,627
kulcsok értékei csak vonal pontokként vannak meghatározva. Összevethetjük

37
00:03:29,627 --> 00:03:34,856
a betűinket számokkal, ezek
akár számok is lehetnének. És aztán, amit

38
00:03:34,856 --> 00:03:41,119
keresünk, hogy megtaláljuk vagy megszámljuk a
pontokat egy adott egy dimenziós intervallumon belül.

39
00:03:41,575 --> 00:03:47,272
Szóval, hogyan tudjuk ezt megvalósítani?
Ez a probléma nagyon

40
00:03:47,272 --> 00:03:52,356
hasonlít a mi szimbólum tábla problémánkra.
Fontolóra vehetnénk az elemek

41
00:03:52,356 --> 00:03:57,529
rendezetlen tömbben való tárolását. Tegyük csak
bele őket egy tömbbe és akkor a beszúrás

42
00:03:57,529 --> 00:04:03,254
gyors. Csak hozzáadjuk a tömb végéhez.
Lehetséges, hogy újra kell méreteznünk, hogy

43
00:04:03,254 --> 00:04:08,371
növekedjen a tömb. De ez nem
túl vonzó, mert sok kulcs esetén

44
00:04:08,371 --> 00:04:13,899
ahhoz, hogy megszámoljuk az
adott intervallumba eső kulcsokat,

45
00:04:13,899 --> 00:04:19,711
végig kell menni az összes kulcson és megnézni,
hogy az intervallumba esik-e vagy sem és visszaadni

46
00:04:19,711 --> 00:04:26,043
őket. Szóval lineáris futásidőről beszélünk
nagy számú kulcs esetén. Ha az elemeket

47
00:04:26,267 --> 00:04:32,638
sorrendben tartjuk mint a bináris keresés esetén
akkor ahhoz, hogy a tömb rendezett maradjon,

48
00:04:32,638 --> 00:04:38,591
a nagyobb értékeket lehet, hogy
eggyel odébb kell mozgatni.

49
00:04:38,596 --> 00:04:44,209
és így tovább vagy ahogy szimbólum táblák kapcsán
az elemi bináris keresés implementációk

50
00:04:44,406 --> 00:04:49,662
tették. Szóval, a beszúrás lineáris, viszont
aztán a bináris keresés használható

51
00:04:49,662 --> 00:04:55,329
hogy megtaláljuk a két végpontot,
aminek a futásideje

52
00:04:55,329 --> 00:05:00,631
logN-el arányos. És aztán ebből
ki lehet találni, hogy hány kulcsunk

53
00:05:00,631 --> 00:05:06,243
van, vagy a legkisebb illetve a legnagyobb
közöttieket mind visszaadni.

54
00:05:06,243 --> 00:05:12,027
Ezek az elemi implementációk
elfogadhatatlanok

55
00:05:12,027 --> 00:05:18,179
nagy számú kulcs esetén, mivel
lineáris a futásidejük.

56
00:05:18,179 --> 00:05:24,035
Amit igazán szeretnénk, hogy logN-el arányos
legyen a futásidőnk. Mind beszúráshoz és

57
00:05:24,035 --> 00:05:29,186
mind számláláshoz. Intervallum kereséshez
természetesen minden kulcsot,

58
00:05:29,186 --> 00:05:35,413
amit visszaadunk, el kell érnünk, így
a futásidőnk arányos lesz az illeszkedő

59
00:05:35,413 --> 00:05:43,042
kulcsok számával. De egyébként
ezek ésszerű célok. És ezeket könnyű

60
00:05:43,042 --> 00:05:51,545
elérni. Szóval [köhög] szóval, például mi a helyzet
az egy-dimenziós intervallum számlálással?

61
00:05:51,545 --> 00:05:58,014
Amit teszünk, a kulcsokat egy
bináris keresőfában tároljuk és

62
00:05:58,014 --> 00:06:03,484
megnézzük a rang művelet megvalósítását
bináris keresőfák esetén, ahol

63
00:06:03,484 --> 00:06:09,342
minden kulcshoz ki tudjuk számolni hány
kulcs az, ami szigorúan kisebb mint a

64
00:06:09,342 --> 00:06:15,508
kulcs. Szóval ebben az esetben, e rangja kettő
és h rangja három és így tovább. Szóval, egy

65
00:06:15,508 --> 00:06:21,413
bináris keresőfában ezeket a rang értékeket
növekvő sorrendben sorolja fel a gyökérközepű

66
00:06:21,413 --> 00:06:27,662
 inorder bejárás és ezeket könnyű
kiszámolni. A rang értéket tárolhatjuk

67
00:06:27,662 --> 00:06:33,813
egy mezőben vagy tárolhatunk a fa
méretét amiből könnyű kiszámolni

68
00:06:33,813 --> 00:06:40,760
a rangot. Szóval hány kulcs van
mondjuk e és s között? Hát egy, kettő,

69
00:06:40,760 --> 00:06:51,297
három, négy, öt. Tulajdonképpen csak
a rangok közötti különbség plusz egy ha

70
00:06:51,623 --> 00:07:00,361
a felső [köhög] elem ay intervallum keresésben
benne van a táblában és nincs a +egy egyébként.

71
00:07:00,361 --> 00:07:08,274
Ugyanannyi kulcs van e és s között
mint amennyi e és t között, öt.

72
00:07:08,274 --> 00:07:15,192
F és t között csak négy van. Szóval
ez az 1d intervallum elemszám egy

73
00:07:15,192 --> 00:07:22,412
nagyon könnyen végrehajtható számítás,
log időben, bináris keresőfa segítségével. A

74
00:07:22,412 --> 00:07:28,297
[köhög] a keresés során megvizsgált
csomópontok száma megegyezik

75
00:07:28,297 --> 00:07:33,789
az alsóhoz és a felsőhöz vezető keresési útak
összegével, hogy [köhög] megtaláljuk a rangjaikat

76
00:07:33,976 --> 00:07:39,595
és ez logN-el arányos lesz. [köhög].
Szóval és az intervallum keresés.

77
00:07:39,595 --> 00:07:46,018
Csak egy rekurzív keresést végzünk, hogy
megtaláljuk az összes kulcsot az alsó és felső között

78
00:07:46,214 --> 00:07:51,472
Megnézzük a bal részfát ha valamelyik
az intervallumba esne. Megnézzük az

79
00:07:51,472 --> 00:07:57,106
aktuális csomópontot és megnézzük a jobb oldali
részfát, ha valamelyik beleesne az

80
00:07:57,106 --> 00:08:02,555
intervallumba. És könnyű megmondani, hogy vajon
valamelyik közülök beleesik-e az intervallumba

81
00:08:02,555 --> 00:08:08,476
csak megnézzük vajon az intervallumok
átfedik-e a gyökeret vagy sem. Ha

82
00:08:08,476 --> 00:08:14,469
az összes kulcsot keresnénk ami f és t között van
akkor a mindkét gyökér részfában keresnünk kell.

83
00:08:14,469 --> 00:08:19,643
Viszont nem nézzük meg a bal részfáját
e-nek, mert mindegyik kisebb mint

84
00:08:19,643 --> 00:08:26,018
e és ezért f-nél is kisebb. Szóval
nem kell még ott is keresnünk. De

85
00:08:26,018 --> 00:08:31,419
egyébként ez egy egyszerű módosítása a rekurzív
fa keresésének, hogy megtaláljuk az összes kulcsot

86
00:08:31,635 --> 00:08:37,702
és könnyű látni a futásidejét
ez arányos lesz a

87
00:08:37,702 --> 00:08:47,518
visszaadott kulcsok számával plusz logN. Szóval,
ez az egy dimenziós intervallum keresés

88
00:08:47,518 --> 00:08:51,040
bináris keresőfák segítségével.