1
00:00:01,065 --> 00:00:07,024
Finalmente, hablaremos acerca de estabilidad. Esta es
una de las reglas de el juego, pero

2
00:00:07,024 --> 00:00:11,029
es mucho más fácil hablar acerca de ella en el
contexto de los algoritmos reales que hemos

3
00:00:11,029 --> 00:00:15,068
visto hasta ahora. Realmente no hace
sentido si no conoces comparadores

4
00:00:15,068 --> 00:00:21,022
que recién fueron introducidos. Para la 
aplicación típica que recién usé como ejemplo

5
00:00:21,022 --> 00:00:26,098
es, digamos el set/conjunto de registros de estudiantes.
Los tenemos ordenados por nombre y digamos

6
00:00:26,098 --> 00:00:31,884
que es algo que hacemos junto antes de asignar
las calificaciones finales. Quizá la tercera línea ahi

7
00:00:31,884 --> 00:00:38,026
es la calificación final. Así que está todo bien
ordenado por nombre, pero entonces de modo

8
00:00:38,026 --> 00:00:44,009
que si quisieramos distribuir a la gente que encabeza
en secciones, lo que que queremos hacer es

9
00:00:44,009 --> 00:00:50,625
ordenar por segundos campos, ordenar por
sección. El problema es que cuando 

10
00:00:50,625 --> 00:00:57,945
hacemos eso, se revuelve el ordenamiento por nombre
y eso es molesto. Puedes asumir que

11
00:00:57,945 --> 00:01:04,329
una vez que has hecho el ordenamiento por nombre, 
entonces cuando ordenas por el segundo campo entonces,

12
00:01:04,329 --> 00:01:10,742
debes mantener el ordenamiento por nombre para
todas esas llaves iguales en ese segundo 

13
00:01:10,742 --> 00:01:17,191
campo. Actualmente, no todos los ordenamientos
preservan esa propiedad que se llama estabilidad.

14
00:01:17,191 --> 00:01:22,726
Y claramente, vale la pena pensar
si tu aplicación 

15
00:01:22,726 --> 00:01:28,039
quiere o necesita tener un ordenamiento es. 
Es una sorpresa incómoda para mucha gente y

16
00:01:28,039 --> 00:01:33,659
muchas aplicaciones. Así que un ordenamiento estable es
un ordenamiento que preserva el orden relativo de 

17
00:01:33,659 --> 00:01:38,956
elementos con llaves iguales. Cuales ordenamientos
son estables? Esa es una pregunta interesante,

18
00:01:38,956 --> 00:01:44,879
la que revisaremos ahora. La 
respuesta rápida, es que la inserción ordenada y

19
00:01:44,879 --> 00:01:52,238
ordenación por mezcla (mergesort) son estables,
no así el ordenamiento por selección o Shellsort.
Y aún dentro de este grupo,

20
00:01:52,238 --> 00:01:58,477
hay implementaciones que pueden
no ser estables. Tienes que 

21
00:01:58,477 --> 00:02:04,158
revisar cuidadosamente el código para estar seguro.
Siempre en estos casos, tenemos un ejercicio

22
00:02:04,158 --> 00:02:10,834
o pregunta de prueba es si la versión de este
ordenamiento es estable o no? Así, estudiantes aprenden a

23
00:02:10,834 --> 00:02:16,709
reconocer si un código es estable. 
Este es otro ejemplo típico donde

24
00:02:16,905 --> 00:02:21,879
tenemos objetos ordenados por tiempo luego
puede ser que estos elementos sean

25
00:02:22,050 --> 00:02:27,435
eventos importantes. La gente compra boletos para
un concierto de rock y voy a ordenar por

26
00:02:27,435 --> 00:02:31,702
localidad y lo que quisieramos es poder
mantener el ordenamiento por tiempo pero este es un

27
00:02:31,702 --> 00:02:36,640
ordenamiento no estable 

28
00:02:36,640 --> 00:02:41,725
*** Pero si usan un ordenador estable, entonces

29
00:02:41,725 --> 00:02:47,692
si permanece ordenado por tiempo y muchas
aplicaciones quieren estabilidad. Bien,

30
00:02:47,692 --> 00:02:54,015
vamos a ver a cada uno de los 
algoritmos que vamos a considerar hasta ahora

31
00:02:54,207 --> 00:02:59,097
Ordenamiento por Inserciones, es estable,
Por que es estable? Bueno, nunca movemos

32
00:02:59,097 --> 00:03:05,633
elementos iguales de un lugar a otro. En este
ejemplo aquí, cuando obtenemos A1,  eso es 

33
00:03:05,866 --> 00:03:12,141
lo que pasa en este caso, el índice es solo uno 
que aparece en el arreglo, es solo A's 

34
00:03:12,141 --> 00:03:18,763
y B's. Cuando obtenemos nuestro segundo A, paramos
el ordenamiento mientras no haya menos. 

35
00:03:18,763 --> 00:03:24,911
iguales, no somos menos, paramos de modo
que nunca movemos un miembro igual después de otro.

36
00:03:24,911 --> 00:03:30,488
Si es menor o menor que o igual, entonces
no funcionaría. O si lo hicieramos 

37
00:03:30,488 --> 00:03:35,818
de otro modo y procediéramos en consecuencia, 
Así que miembros iguales nunca se mueven uno después del otro en

38
00:03:35,818 --> 00:03:41,997
este código, por lo tanto el ordenamiento por inserción es
estable. Pero el ordenamiento por selección no es estable

39
00:03:42,298 --> 00:03:49,529
La forma usual de mostrar que un ordenamiento
no es estable y  es ver

40
00:03:49,529 --> 00:03:55,875
si tiene intercambio de larga distancia que pueda
mover un elemento pasando otro elemento igual.

41
00:03:56,163 --> 00:04:02,245
En este caso, por ejemplo para
el ordenamiento por selección, cuando hacemos 

42
00:04:02,245 --> 00:04:08,471
ese primer intercambio, donde encontramos el
mínimo A y B está en posición zero. Hacemos

43
00:04:08,471 --> 00:04:14,951
un intercambio a largo distancia y eso 
catapulta ese primer miembro mas allá de cualquier miembro

44
00:04:14,951 --> 00:04:21,249
que pueda ser igual sacandolo fuera de 
orden. Y eso puede que no pueda ser reparado, 

45
00:04:21,249 --> 00:04:26,524
así que ese ordenamiento no es estable.  Puede
mover miembros mas allá de algún miembro igual y dejar

46
00:04:26,524 --> 00:04:32,601
un resultado donde miembros que son iguales o en
un orden diferente que el que tuvieron originalmente

47
00:04:32,601 --> 00:04:39,016
en el archivo. El ordenamiento de Selección no es estable.
Shellsort también tiene un intercambio de larga distancia

48
00:04:39,016 --> 00:04:45,479
y por lo tanto no es estable. Este mueve las llaves
mas allá de otras llaves que pueden ser iguales y es

49
00:04:45,479 --> 00:04:51,024
fácil construir ejemplos mostrando que 
El ordenamiento por Seleccion no es estable y que

50
00:04:51,024 --> 00:04:57,527
tal Mergesort? Mergesort (Ordenamiento por mezcla),
bueno este es estable mientras la operación de mezcla

51
00:04:57,527 --> 00:05:02,923
es estable y esa operación va a ser estable 
dependiendo en como la codifiquemos

52
00:05:03,118 --> 00:05:09,232
Ym en nuestro código, si hay dos llaves que son 
iguales, toma de el sub-arreglo izquierdo, asi

53
00:05:09,232 --> 00:05:15,670
que significa que, siempre tomara
si hay dos sets de llaves iguales, se

54
00:05:15,670 --> 00:05:21,112
preservará el orden relativo y
eso es suficiente para mostrar que la

55
00:05:21,112 --> 00:05:26,672
operación mezcla es estable y por lo tanto
Mergesort es estable. Estabilidad es una

56
00:05:26,672 --> 00:05:38,905
propiedad importante en algoritmos de ordenamiento.
Mergesort no es solo eficiente, es también